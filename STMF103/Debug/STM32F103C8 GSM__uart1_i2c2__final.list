
STM32F103C8 GSM__uart1_i2c2__final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004770  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b24  08004b24  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b24  08004b24  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b24  08004b24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b24  08004b24  00014b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08004b9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004b9c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095a2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001955  00000000  00000000  0002963b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002af90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016769  00000000  00000000  0002c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae3c  00000000  00000000  00042969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c39  00000000  00000000  0004d7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d03de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd0  00000000  00000000  000d0434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004868 	.word	0x08004868

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004868 	.word	0x08004868

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	f5ad 6d05 	sub.w	sp, sp, #2128	; 0x850
 8000a52:	af04      	add	r7, sp, #16

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000a54:	f000 ff84 	bl	8001960 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a58:	f000 fc8a 	bl	8001370 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a5c:	f000 fd64 	bl	8001528 <MX_GPIO_Init>
	MX_CRC_Init();
 8000a60:	f000 fccc 	bl	80013fc <MX_CRC_Init>
	MX_I2C2_Init();
 8000a64:	f000 fcde 	bl	8001424 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000a68:	f000 fd0a 	bl	8001480 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000a6c:	f000 fd32 	bl	80014d4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	uint8_t data_packet[1031]={0};
 8000a70:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	f240 4203 	movw	r2, #1027	; 0x403
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 f99d 	bl	8003dc0 <memset>
	uint8_t data_array[1024]={0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	3304      	adds	r3, #4
 8000a90:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 f992 	bl	8003dc0 <memset>
	uint32_t CRC_Value;
	uint8_t cmd_packet [6]={0};
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	809a      	strh	r2, [r3, #4]
	/* search file at server */

	uint32_t file_size;

	GSM_Get_File_From_Server();
 8000aa8:	f000 f95c 	bl	8000d64 <GSM_Get_File_From_Server>

	file_size= GSM_GET_FILE_SIZE();
 8000aac:	f000 fa42 	bl	8000f34 <GSM_GET_FILE_SIZE>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820

	GSM_TO_STM_TO_EEPROM_FILE_SEND( file_size);
 8000ab6:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fab0 	bl	8001020 <GSM_TO_STM_TO_EEPROM_FILE_SEND>

	/* transmitting the first packet (command Packet)*/

	cmd_packet[0]=5;
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2205      	movs	r2, #5
 8000ac6:	701a      	strb	r2, [r3, #0]
	cmd_packet[1]=0x31;
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2231      	movs	r2, #49	; 0x31
 8000ace:	705a      	strb	r2, [r3, #1]
	for (uint32_t i=0;i<2;i++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 8000ad6:	e017      	b.n	8000b08 <main+0xbc>
	{
		uint32_t i_data=cmd_packet[i];
 8000ad8:	f107 020c 	add.w	r2, r7, #12
 8000adc:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	601a      	str	r2, [r3, #0]
		CRC_Value=HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	2201      	movs	r2, #1
 8000af2:	4619      	mov	r1, r3
 8000af4:	488b      	ldr	r0, [pc, #556]	; (8000d24 <main+0x2d8>)
 8000af6:	f001 f8e2 	bl	8001cbe <HAL_CRC_Accumulate>
 8000afa:	f8c7 083c 	str.w	r0, [r7, #2108]	; 0x83c
	for (uint32_t i=0;i<2;i++)
 8000afe:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8000b02:	3301      	adds	r3, #1
 8000b04:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 8000b08:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d9e3      	bls.n	8000ad8 <main+0x8c>

	}

	//first_packet=first_packet+2;
	uint8_t *ptr=cmd_packet;
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	ptr+=2;
 8000b18:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	*((uint32_t *)ptr) = CRC_Value;
 8000b22:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8000b26:	f8d7 283c 	ldr.w	r2, [r7, #2108]	; 0x83c
 8000b2a:	601a      	str	r2, [r3, #0]

	while(INTflag!=1)
 8000b2c:	bf00      	nop
 8000b2e:	4b7e      	ldr	r3, [pc, #504]	; (8000d28 <main+0x2dc>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d1fb      	bne.n	8000b2e <main+0xe2>
	{

	}

	HAL_Delay(2000);
 8000b36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b3a:	f000 ff73 	bl	8001a24 <HAL_Delay>
	HAL_UART_Transmit(&huart2, cmd_packet, sizeof(cmd_packet), HAL_MAX_DELAY);
 8000b3e:	f107 010c 	add.w	r1, r7, #12
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	2206      	movs	r2, #6
 8000b48:	4878      	ldr	r0, [pc, #480]	; (8000d2c <main+0x2e0>)
 8000b4a:	f002 fefe 	bl	800394a <HAL_UART_Transmit>

	/* getting the data from the EEPROM and sending it to the other STM32*/

	uint8_t temp=ceil(file_size/1024.0);
 8000b4e:	f8d7 0820 	ldr.w	r0, [r7, #2080]	; 0x820
 8000b52:	f7ff fc47 	bl	80003e4 <__aeabi_ui2d>
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	4b75      	ldr	r3, [pc, #468]	; (8000d30 <main+0x2e4>)
 8000b5c:	f7ff fde6 	bl	800072c <__aeabi_ddiv>
 8000b60:	4602      	mov	r2, r0
 8000b62:	460b      	mov	r3, r1
 8000b64:	4610      	mov	r0, r2
 8000b66:	4619      	mov	r1, r3
 8000b68:	f003 fdfe 	bl	8004768 <ceil>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	460b      	mov	r3, r1
 8000b70:	4610      	mov	r0, r2
 8000b72:	4619      	mov	r1, r3
 8000b74:	f7ff ff4a 	bl	8000a0c <__aeabi_d2uiz>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f887 381b 	strb.w	r3, [r7, #2075]	; 0x81b
	for(int counter=0;counter<temp;counter++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8000b84:	e0c6      	b.n	8000d14 <main+0x2c8>
	{
		for(int counter_1=0;counter_1<16;counter_1++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 8000b8c:	e022      	b.n	8000bd4 <main+0x188>
		{

			HAL_I2C_Mem_Read(&hi2c2, 0XA0, 64*counter_1+counter*1024, 2, &data_array[64*counter_1], 64, 1000);
 8000b8e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8000b92:	011a      	lsls	r2, r3, #4
 8000b94:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8000b98:	4413      	add	r3, r2
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	019b      	lsls	r3, r3, #6
 8000b9e:	b299      	uxth	r1, r3
 8000ba0:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8000ba4:	019b      	lsls	r3, r3, #6
 8000ba6:	f107 0214 	add.w	r2, r7, #20
 8000baa:	4413      	add	r3, r2
 8000bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb0:	9202      	str	r2, [sp, #8]
 8000bb2:	2240      	movs	r2, #64	; 0x40
 8000bb4:	9201      	str	r2, [sp, #4]
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2302      	movs	r3, #2
 8000bba:	460a      	mov	r2, r1
 8000bbc:	21a0      	movs	r1, #160	; 0xa0
 8000bbe:	485d      	ldr	r0, [pc, #372]	; (8000d34 <main+0x2e8>)
 8000bc0:	f001 fc9a 	bl	80024f8 <HAL_I2C_Mem_Read>
			HAL_Delay(10);
 8000bc4:	200a      	movs	r0, #10
 8000bc6:	f000 ff2d 	bl	8001a24 <HAL_Delay>
		for(int counter_1=0;counter_1<16;counter_1++)
 8000bca:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8000bce:	3301      	adds	r3, #1
 8000bd0:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 8000bd4:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	ddd8      	ble.n	8000b8e <main+0x142>
		}

		/* constructing the data packet to send it using UART2*/
		/* c means we send data array of 1024 */
		data_packet [0]='c';
 8000bdc:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8000be0:	2263      	movs	r2, #99	; 0x63
 8000be2:	701a      	strb	r2, [r3, #0]
		/* adjusting the flag*/
		if(counter==temp-1)
 8000be4:	f897 381b 	ldrb.w	r3, [r7, #2075]	; 0x81b
 8000be8:	3b01      	subs	r3, #1
 8000bea:	f8d7 2834 	ldr.w	r2, [r7, #2100]	; 0x834
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d121      	bne.n	8000c36 <main+0x1ea>
		{
			data_packet[1025]=1;
 8000bf2:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
			for(uint16_t count=file_size-counter*1024;count<1024;count++)
 8000bfc:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	029b      	lsls	r3, r3, #10
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	f8a7 382e 	strh.w	r3, [r7, #2094]	; 0x82e
 8000c12:	e00a      	b.n	8000c2a <main+0x1de>
			{
				data_array[count]=0xFF;
 8000c14:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	; 0x82e
 8000c18:	f107 0214 	add.w	r2, r7, #20
 8000c1c:	21ff      	movs	r1, #255	; 0xff
 8000c1e:	54d1      	strb	r1, [r2, r3]
			for(uint16_t count=file_size-counter*1024;count<1024;count++)
 8000c20:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	; 0x82e
 8000c24:	3301      	adds	r3, #1
 8000c26:	f8a7 382e 	strh.w	r3, [r7, #2094]	; 0x82e
 8000c2a:	f8b7 382e 	ldrh.w	r3, [r7, #2094]	; 0x82e
 8000c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c32:	d3ef      	bcc.n	8000c14 <main+0x1c8>
 8000c34:	e004      	b.n	8000c40 <main+0x1f4>
			}
		}
		else
		{
			data_packet[1025]=0;
 8000c36:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
		}
		/*getting the data array into the data packet*/
		for(int i=1;i<1025;i++)
 8000c40:	2301      	movs	r3, #1
 8000c42:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 8000c46:	e011      	b.n	8000c6c <main+0x220>
		{
			data_packet[i]=data_array[i-1];
 8000c48:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	f107 0214 	add.w	r2, r7, #20
 8000c52:	5cd1      	ldrb	r1, [r2, r3]
 8000c54:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8000c58:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8000c5c:	4413      	add	r3, r2
 8000c5e:	460a      	mov	r2, r1
 8000c60:	701a      	strb	r2, [r3, #0]
		for(int i=1;i<1025;i++)
 8000c62:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8000c66:	3301      	adds	r3, #1
 8000c68:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 8000c6c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8000c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c74:	dde8      	ble.n	8000c48 <main+0x1fc>
		}

		/* constructing the CRC */
		CRC_Value=0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
		for (uint32_t i=0;i<1026;i++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8000c82:	e015      	b.n	8000cb0 <main+0x264>
		{
			uint32_t i_data=data_packet[i];
 8000c84:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8000c88:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8000c8c:	4413      	add	r3, r2
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	601a      	str	r2, [r3, #0]
			CRC_Value=HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4821      	ldr	r0, [pc, #132]	; (8000d24 <main+0x2d8>)
 8000c9e:	f001 f80e 	bl	8001cbe <HAL_CRC_Accumulate>
 8000ca2:	f8c7 083c 	str.w	r0, [r7, #2108]	; 0x83c
		for (uint32_t i=0;i<1026;i++)
 8000ca6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8000caa:	3301      	adds	r3, #1
 8000cac:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8000cb0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8000cb4:	f240 4201 	movw	r2, #1025	; 0x401
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d9e3      	bls.n	8000c84 <main+0x238>

		}

		//first_packet=first_packet+2;
		ptr=data_packet;
 8000cbc:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8000cc0:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
		ptr+=1026;
 8000cc4:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8000cc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8000ccc:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
		*((uint32_t *)ptr)=CRC_Value;
 8000cd0:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8000cd4:	f8d7 283c 	ldr.w	r2, [r7, #2108]	; 0x83c
 8000cd8:	601a      	str	r2, [r3, #0]

		while(INTflag!=counter+2)
 8000cda:	bf00      	nop
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <main+0x2dc>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d1f7      	bne.n	8000cdc <main+0x290>
		{

		}

		HAL_Delay(200);
 8000cec:	20c8      	movs	r0, #200	; 0xc8
 8000cee:	f000 fe99 	bl	8001a24 <HAL_Delay>
		HAL_UART_Transmit(&huart2, data_packet, sizeof(data_packet), HAL_MAX_DELAY);
 8000cf2:	f207 4114 	addw	r1, r7, #1044	; 0x414
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	f240 4207 	movw	r2, #1031	; 0x407
 8000cfe:	480b      	ldr	r0, [pc, #44]	; (8000d2c <main+0x2e0>)
 8000d00:	f002 fe23 	bl	800394a <HAL_UART_Transmit>
		HAL_Delay(10);
 8000d04:	200a      	movs	r0, #10
 8000d06:	f000 fe8d 	bl	8001a24 <HAL_Delay>
	for(int counter=0;counter<temp;counter++)
 8000d0a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8000d0e:	3301      	adds	r3, #1
 8000d10:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8000d14:	f897 381b 	ldrb.w	r3, [r7, #2075]	; 0x81b
 8000d18:	f8d7 2834 	ldr.w	r2, [r7, #2100]	; 0x834
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f6ff af32 	blt.w	8000b86 <main+0x13a>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
 8000d22:	e7fe      	b.n	8000d22 <main+0x2d6>
 8000d24:	2000009c 	.word	0x2000009c
 8000d28:	2000008c 	.word	0x2000008c
 8000d2c:	2000013c 	.word	0x2000013c
 8000d30:	40900000 	.word	0x40900000
 8000d34:	200000a4 	.word	0x200000a4

08000d38 <HAL_GPIO_EXTI_Callback>:
	}
	/* USER CODE END 3 */

}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_12)
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d48:	d105      	bne.n	8000d56 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		INTflag++;
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x28>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x28>)
 8000d54:	701a      	strb	r2, [r3, #0]
	}
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	2000008c 	.word	0x2000008c

08000d64 <GSM_Get_File_From_Server>:

void GSM_Get_File_From_Server()
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b092      	sub	sp, #72	; 0x48
 8000d68:	af00      	add	r7, sp, #0
	uint8_t cmd[70];
	sprintf(cmd,"AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\n");
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4966      	ldr	r1, [pc, #408]	; (8000f08 <GSM_Get_File_From_Server+0x1a4>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 f82e 	bl	8003dd0 <siprintf>
	HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
 8000d74:	463b      	mov	r3, r7
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff f9ea 	bl	8000150 <strlen>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4639      	mov	r1, r7
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	4861      	ldr	r0, [pc, #388]	; (8000f0c <GSM_Get_File_From_Server+0x1a8>)
 8000d88:	f002 fddf 	bl	800394a <HAL_UART_Transmit>
	HAL_Delay(200);
 8000d8c:	20c8      	movs	r0, #200	; 0xc8
 8000d8e:	f000 fe49 	bl	8001a24 <HAL_Delay>
	sprintf(cmd,"AT+SAPBR=3,1,\"APN\",\"etisalat\"\n");
 8000d92:	463b      	mov	r3, r7
 8000d94:	495e      	ldr	r1, [pc, #376]	; (8000f10 <GSM_Get_File_From_Server+0x1ac>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 f81a 	bl	8003dd0 <siprintf>
	HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff f9d6 	bl	8000150 <strlen>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4639      	mov	r1, r7
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	4857      	ldr	r0, [pc, #348]	; (8000f0c <GSM_Get_File_From_Server+0x1a8>)
 8000db0:	f002 fdcb 	bl	800394a <HAL_UART_Transmit>
	HAL_Delay(200);
 8000db4:	20c8      	movs	r0, #200	; 0xc8
 8000db6:	f000 fe35 	bl	8001a24 <HAL_Delay>
	sprintf(cmd,"AT+SAPBR=1,1\n");
 8000dba:	463b      	mov	r3, r7
 8000dbc:	4955      	ldr	r1, [pc, #340]	; (8000f14 <GSM_Get_File_From_Server+0x1b0>)
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 f806 	bl	8003dd0 <siprintf>
	HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff f9c2 	bl	8000150 <strlen>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	4639      	mov	r1, r7
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	484d      	ldr	r0, [pc, #308]	; (8000f0c <GSM_Get_File_From_Server+0x1a8>)
 8000dd8:	f002 fdb7 	bl	800394a <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000ddc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000de0:	f000 fe20 	bl	8001a24 <HAL_Delay>
	sprintf(cmd,"AT+FTPSERV=\"199.102.48.28\"\n");
 8000de4:	463b      	mov	r3, r7
 8000de6:	494c      	ldr	r1, [pc, #304]	; (8000f18 <GSM_Get_File_From_Server+0x1b4>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 fff1 	bl	8003dd0 <siprintf>
	HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
 8000dee:	463b      	mov	r3, r7
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff f9ad 	bl	8000150 <strlen>
 8000df6:	4603      	mov	r3, r0
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4639      	mov	r1, r7
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	4842      	ldr	r0, [pc, #264]	; (8000f0c <GSM_Get_File_From_Server+0x1a8>)
 8000e02:	f002 fda2 	bl	800394a <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000e06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e0a:	f000 fe0b 	bl	8001a24 <HAL_Delay>
	sprintf(cmd,"AT+FTPPORT=\"21\"\n");
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4942      	ldr	r1, [pc, #264]	; (8000f1c <GSM_Get_File_From_Server+0x1b8>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 ffdc 	bl	8003dd0 <siprintf>
	HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff f998 	bl	8000150 <strlen>
 8000e20:	4603      	mov	r3, r0
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	4639      	mov	r1, r7
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	4838      	ldr	r0, [pc, #224]	; (8000f0c <GSM_Get_File_From_Server+0x1a8>)
 8000e2c:	f002 fd8d 	bl	800394a <HAL_UART_Transmit>
	HAL_Delay(200);
 8000e30:	20c8      	movs	r0, #200	; 0xc8
 8000e32:	f000 fdf7 	bl	8001a24 <HAL_Delay>
	sprintf(cmd,"AT+FTPUN=\"fota22\"\n");
 8000e36:	463b      	mov	r3, r7
 8000e38:	4939      	ldr	r1, [pc, #228]	; (8000f20 <GSM_Get_File_From_Server+0x1bc>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 ffc8 	bl	8003dd0 <siprintf>
	HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
 8000e40:	463b      	mov	r3, r7
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff f984 	bl	8000150 <strlen>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	482e      	ldr	r0, [pc, #184]	; (8000f0c <GSM_Get_File_From_Server+0x1a8>)
 8000e54:	f002 fd79 	bl	800394a <HAL_UART_Transmit>
	HAL_Delay(200);
 8000e58:	20c8      	movs	r0, #200	; 0xc8
 8000e5a:	f000 fde3 	bl	8001a24 <HAL_Delay>
	sprintf(cmd,"AT+FTPPW=\"FOTA123456\"\n");
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4930      	ldr	r1, [pc, #192]	; (8000f24 <GSM_Get_File_From_Server+0x1c0>)
 8000e62:	4618      	mov	r0, r3
 8000e64:	f002 ffb4 	bl	8003dd0 <siprintf>
	HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff f970 	bl	8000150 <strlen>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4639      	mov	r1, r7
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	4824      	ldr	r0, [pc, #144]	; (8000f0c <GSM_Get_File_From_Server+0x1a8>)
 8000e7c:	f002 fd65 	bl	800394a <HAL_UART_Transmit>
	/* name file */HAL_Delay(200);
 8000e80:	20c8      	movs	r0, #200	; 0xc8
 8000e82:	f000 fdcf 	bl	8001a24 <HAL_Delay>
	sprintf(cmd,"AT+FTPGETNAME=\"ss.bin\"\n");
 8000e86:	463b      	mov	r3, r7
 8000e88:	4927      	ldr	r1, [pc, #156]	; (8000f28 <GSM_Get_File_From_Server+0x1c4>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 ffa0 	bl	8003dd0 <siprintf>
	HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
 8000e90:	463b      	mov	r3, r7
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff f95c 	bl	8000150 <strlen>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	481a      	ldr	r0, [pc, #104]	; (8000f0c <GSM_Get_File_From_Server+0x1a8>)
 8000ea4:	f002 fd51 	bl	800394a <HAL_UART_Transmit>
	HAL_Delay(200);
 8000ea8:	20c8      	movs	r0, #200	; 0xc8
 8000eaa:	f000 fdbb 	bl	8001a24 <HAL_Delay>
	sprintf(cmd,"AT+FTPGETPATH=\"/\"\n");
 8000eae:	463b      	mov	r3, r7
 8000eb0:	491e      	ldr	r1, [pc, #120]	; (8000f2c <GSM_Get_File_From_Server+0x1c8>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 ff8c 	bl	8003dd0 <siprintf>
	HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff f948 	bl	8000150 <strlen>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4639      	mov	r1, r7
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	4810      	ldr	r0, [pc, #64]	; (8000f0c <GSM_Get_File_From_Server+0x1a8>)
 8000ecc:	f002 fd3d 	bl	800394a <HAL_UART_Transmit>
	HAL_Delay(200);
 8000ed0:	20c8      	movs	r0, #200	; 0xc8
 8000ed2:	f000 fda7 	bl	8001a24 <HAL_Delay>

	/* save file in GSM with name "file3.txt"*/
	sprintf(cmd,"AT+FTPGETTOFS=0,\"final.bin\"\n");
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4915      	ldr	r1, [pc, #84]	; (8000f30 <GSM_Get_File_From_Server+0x1cc>)
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 ff78 	bl	8003dd0 <siprintf>
	HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff f934 	bl	8000150 <strlen>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4639      	mov	r1, r7
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <GSM_Get_File_From_Server+0x1a8>)
 8000ef4:	f002 fd29 	bl	800394a <HAL_UART_Transmit>
	HAL_Delay(40000);
 8000ef8:	f649 4040 	movw	r0, #40000	; 0x9c40
 8000efc:	f000 fd92 	bl	8001a24 <HAL_Delay>
	/*
	sprintf(cmd,"AT+SAPBR=0,1\n");
	HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
	HAL_Delay(200);
	 */
}
 8000f00:	bf00      	nop
 8000f02:	3748      	adds	r7, #72	; 0x48
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	08004880 	.word	0x08004880
 8000f0c:	200000f8 	.word	0x200000f8
 8000f10:	080048a0 	.word	0x080048a0
 8000f14:	080048c0 	.word	0x080048c0
 8000f18:	080048d0 	.word	0x080048d0
 8000f1c:	080048ec 	.word	0x080048ec
 8000f20:	08004900 	.word	0x08004900
 8000f24:	08004914 	.word	0x08004914
 8000f28:	0800492c 	.word	0x0800492c
 8000f2c:	08004944 	.word	0x08004944
 8000f30:	08004958 	.word	0x08004958

08000f34 <GSM_GET_FILE_SIZE>:
int GSM_GET_FILE_SIZE()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0a8      	sub	sp, #160	; 0xa0
 8000f38:	af00      	add	r7, sp, #0
	/* this function use AT command of GSM to get the size of file */

	int file_size=0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	char cmd[70];
	char cmd_rx[70];
	/* AT command to get file size */
	sprintf(cmd,"AT+FSFLSIZE=C:\\User\\FTP\\final.bin\n");
 8000f40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f44:	4934      	ldr	r1, [pc, #208]	; (8001018 <GSM_GET_FILE_SIZE+0xe4>)
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 ff42 	bl	8003dd0 <siprintf>
	HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
 8000f4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff f8fd 	bl	8000150 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	482e      	ldr	r0, [pc, #184]	; (800101c <GSM_GET_FILE_SIZE+0xe8>)
 8000f64:	f002 fcf1 	bl	800394a <HAL_UART_Transmit>
	/* Receiving the output of gsm to get the size of the file */
	HAL_UART_Receive(&huart1, cmd_rx, 70, 1000);
 8000f68:	4639      	mov	r1, r7
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	2246      	movs	r2, #70	; 0x46
 8000f70:	482a      	ldr	r0, [pc, #168]	; (800101c <GSM_GET_FILE_SIZE+0xe8>)
 8000f72:	f002 fd7c 	bl	8003a6e <HAL_UART_Receive>
	/* define this counter to know the length of the file in digits */
	char counter_len=0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	/* This loop is for counting the length and construct the array of the file size*/
	for (int i =47 ;i<70;i++)
 8000f7c:	232f      	movs	r3, #47	; 0x2f
 8000f7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f82:	e024      	b.n	8000fce <GSM_GET_FILE_SIZE+0x9a>
	{
		counter_len++;
 8000f84:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		cmd_rx[i-47]=cmd_rx[i];
 8000f8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f92:	3b2f      	subs	r3, #47	; 0x2f
 8000f94:	4639      	mov	r1, r7
 8000f96:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000f9a:	440a      	add	r2, r1
 8000f9c:	7812      	ldrb	r2, [r2, #0]
 8000f9e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f803 2ca0 	strb.w	r2, [r3, #-160]
		if(cmd_rx[i]=='\r')
 8000fa8:	463a      	mov	r2, r7
 8000faa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b0d      	cmp	r3, #13
 8000fb4:	d106      	bne.n	8000fc4 <GSM_GET_FILE_SIZE+0x90>
		{
			cmd_rx[i]='\0';
 8000fb6:	463a      	mov	r2, r7
 8000fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
			break;
 8000fc2:	e008      	b.n	8000fd6 <GSM_GET_FILE_SIZE+0xa2>
	for (int i =47 ;i<70;i++)
 8000fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000fc8:	3301      	adds	r3, #1
 8000fca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000fce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000fd2:	2b45      	cmp	r3, #69	; 0x45
 8000fd4:	ddd6      	ble.n	8000f84 <GSM_GET_FILE_SIZE+0x50>
		}

	}
	/* set the rest of the array to null to convert to it later into integer vlaue*/
	for (int i =counter_len;i<70;i++)
 8000fd6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000fda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000fde:	e00a      	b.n	8000ff6 <GSM_GET_FILE_SIZE+0xc2>
	{
		cmd_rx[i]='\0';
 8000fe0:	463a      	mov	r2, r7
 8000fe2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
	for (int i =counter_len;i<70;i++)
 8000fec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000ff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ffa:	2b45      	cmp	r3, #69	; 0x45
 8000ffc:	ddf0      	ble.n	8000fe0 <GSM_GET_FILE_SIZE+0xac>
	}

	/* convert sting to char */
	file_size=atoi(cmd_rx);
 8000ffe:	463b      	mov	r3, r7
 8001000:	4618      	mov	r0, r3
 8001002:	f002 feaf 	bl	8003d64 <atoi>
 8001006:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	return file_size;
 800100a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800100e:	4618      	mov	r0, r3
 8001010:	37a0      	adds	r7, #160	; 0xa0
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	08004978 	.word	0x08004978
 800101c:	200000f8 	.word	0x200000f8

08001020 <GSM_TO_STM_TO_EEPROM_FILE_SEND>:
void GSM_TO_STM_TO_EEPROM_FILE_SEND(int file_size)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
 8001026:	af04      	add	r7, sp, #16
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	6018      	str	r0, [r3, #0]

	int counter =0;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

	for (int i=0;i<ceil((file_size/1024.0));i++)
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8001038:	e169      	b.n	800130e <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x2ee>
	{
		/* this array just to save AT command */
		char cmd[70]={0};
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	3304      	adds	r3, #4
 8001044:	2242      	movs	r2, #66	; 0x42
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f002 feb9 	bl	8003dc0 <memset>

		/* this array to save 1k byte of file data*/
		/*why we initialization here not above loop to make all elements zeros */
		/* at the begging of every iteration */
		char RX_arr[1070]={0};
 800104e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	3304      	adds	r3, #4
 8001058:	f240 422a 	movw	r2, #1066	; 0x42a
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f002 feae 	bl	8003dc0 <memset>
		sprintf(cmd,"AT+FSREAD=C:\\User\\FTP\\file1.bin,1,1024,%d\n",i*1024);
 8001064:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001068:	029a      	lsls	r2, r3, #10
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	49ba      	ldr	r1, [pc, #744]	; (8001358 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x338>)
 8001070:	4618      	mov	r0, r3
 8001072:	f002 fead 	bl	8003dd0 <siprintf>
		HAL_UART_Transmit(&huart1,cmd, strlen(cmd), HAL_MAX_DELAY);
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f868 	bl	8000150 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	b29a      	uxth	r2, r3
 8001084:	f107 0108 	add.w	r1, r7, #8
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	48b3      	ldr	r0, [pc, #716]	; (800135c <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x33c>)
 800108e:	f002 fc5c 	bl	800394a <HAL_UART_Transmit>
		if(i==0)
 8001092:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001096:	2b00      	cmp	r3, #0
 8001098:	d112      	bne.n	80010c0 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0xa0>
		{
			HAL_UART_Receive(&huart1, RX_arr, 1070, 1000);
 800109a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	f240 422e 	movw	r2, #1070	; 0x42e
 80010a6:	48ad      	ldr	r0, [pc, #692]	; (800135c <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x33c>)
 80010a8:	f002 fce1 	bl	8003a6e <HAL_UART_Receive>
		}
		/* check RX_arr index 50 if it equal '\0' or not */
		/* from that we can know is file is received or not */
		/*we choose index 50 dependent on debug */

		while (RX_arr[50]=='\0')
 80010ac:	e008      	b.n	80010c0 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0xa0>
		{
			HAL_UART_Receive(&huart1, RX_arr, 1070, 1000);
 80010ae:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	f240 422e 	movw	r2, #1070	; 0x42e
 80010ba:	48a8      	ldr	r0, [pc, #672]	; (800135c <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x33c>)
 80010bc:	f002 fcd7 	bl	8003a6e <HAL_UART_Receive>
		while (RX_arr[50]=='\0')
 80010c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x8e>
		}
		counter=0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

		/* to count how many element useless in RX_arr */
		for (int k =0;k<1070;k++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 80010d8:	e019      	b.n	800110e <GSM_TO_STM_TO_EEPROM_FILE_SEND+0xee>
		{
			counter++;
 80010da:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80010de:	3301      	adds	r3, #1
 80010e0:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
			if((RX_arr[k]=='\r')&&(RX_arr[k+1]=='\n'))
 80010e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010e8:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80010ec:	4413      	add	r3, r2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b0d      	cmp	r3, #13
 80010f2:	d107      	bne.n	8001104 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0xe4>
 80010f4:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80010f8:	3301      	adds	r3, #1
 80010fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010fe:	5cd3      	ldrb	r3, [r2, r3]
 8001100:	2b0a      	cmp	r3, #10
 8001102:	d00b      	beq.n	800111c <GSM_TO_STM_TO_EEPROM_FILE_SEND+0xfc>
		for (int k =0;k<1070;k++)
 8001104:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8001108:	3301      	adds	r3, #1
 800110a:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800110e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8001112:	f240 422d 	movw	r2, #1069	; 0x42d
 8001116:	4293      	cmp	r3, r2
 8001118:	dddf      	ble.n	80010da <GSM_TO_STM_TO_EEPROM_FILE_SEND+0xba>
 800111a:	e000      	b.n	800111e <GSM_TO_STM_TO_EEPROM_FILE_SEND+0xfe>
			{
				break;
 800111c:	bf00      	nop

		}

		/* to adjust RX_arr and remove all external byte coming just from GSM */
		/* doesnot belong to file data */
		for (int l =0;l<1024;l++)
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8001124:	e014      	b.n	8001150 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x130>
		{
			RX_arr[l]=RX_arr[counter+1+l];
 8001126:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001130:	4413      	add	r3, r2
 8001132:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001136:	5cd1      	ldrb	r1, [r2, r3]
 8001138:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800113c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001140:	4413      	add	r3, r2
 8001142:	460a      	mov	r2, r1
 8001144:	701a      	strb	r2, [r3, #0]
		for (int l =0;l<1024;l++)
 8001146:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800114a:	3301      	adds	r3, #1
 800114c:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8001150:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001158:	dbe5      	blt.n	8001126 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x106>
		}

		/* this part for the last iteration in file */
		/* because the reminder of file not equal 1024 byte we do that  */

		if(i==file_size/1024)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	da01      	bge.n	8001166 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x146>
 8001162:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001166:	129b      	asrs	r3, r3, #10
 8001168:	461a      	mov	r2, r3
 800116a:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800116e:	4293      	cmp	r3, r2
 8001170:	f040 809b 	bne.w	80012aa <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x28a>
				retr[0]=RX_arr[j];
				HAL_UART_Transmit(&huart1,retr, 1, 1000);
				HAL_Delay(1);
			}
			 */
			uint16_t Reminder=file_size-i*1024;
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	b29a      	uxth	r2, r3
 800117a:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800117e:	b29b      	uxth	r3, r3
 8001180:	029b      	lsls	r3, r3, #10
 8001182:	b29b      	uxth	r3, r3
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e

			for(int counter_1=0;counter_1<ceil(Reminder/64.0);counter_1++)
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 8001190:	e06a      	b.n	8001268 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x248>
			{
				if(counter_1==ceil(Reminder/64.0)-1)
 8001192:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001196:	f7ff f935 	bl	8000404 <__aeabi_i2d>
 800119a:	4604      	mov	r4, r0
 800119c:	460d      	mov	r5, r1
 800119e:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f92e 	bl	8000404 <__aeabi_i2d>
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x340>)
 80011ae:	f7ff fabd 	bl	800072c <__aeabi_ddiv>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f003 fad5 	bl	8004768 <ceil>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b68      	ldr	r3, [pc, #416]	; (8001364 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x344>)
 80011c4:	f7fe ffd0 	bl	8000168 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4620      	mov	r0, r4
 80011ce:	4629      	mov	r1, r5
 80011d0:	f7ff fbea 	bl	80009a8 <__aeabi_dcmpeq>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d023      	beq.n	8001222 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x202>
				{
					HAL_I2C_Mem_Write(&hi2c2, 0XA0, 64*counter_1+1024*i, 2, &RX_arr[64*counter_1], Reminder%64, 1000);
 80011da:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80011de:	011a      	lsls	r2, r3, #4
 80011e0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80011e4:	4413      	add	r3, r2
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	019b      	lsls	r3, r3, #6
 80011ea:	b299      	uxth	r1, r3
 80011ec:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80011f0:	019b      	lsls	r3, r3, #6
 80011f2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80011f6:	4413      	add	r3, r2
 80011f8:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 80011fc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001200:	b292      	uxth	r2, r2
 8001202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001206:	9002      	str	r0, [sp, #8]
 8001208:	9201      	str	r2, [sp, #4]
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2302      	movs	r3, #2
 800120e:	460a      	mov	r2, r1
 8001210:	21a0      	movs	r1, #160	; 0xa0
 8001212:	4855      	ldr	r0, [pc, #340]	; (8001368 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x348>)
 8001214:	f001 f876 	bl	8002304 <HAL_I2C_Mem_Write>
					HAL_Delay(10);
 8001218:	200a      	movs	r0, #10
 800121a:	f000 fc03 	bl	8001a24 <HAL_Delay>
					break;
 800121e:	bf00      	nop
				}
				HAL_I2C_Mem_Write(&hi2c2, 0XA0, 64*counter_1+1024*i, 2, &RX_arr[64*counter_1], 64, 1000);
				HAL_Delay(10);
			}
			break;
 8001220:	e074      	b.n	800130c <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x2ec>
				HAL_I2C_Mem_Write(&hi2c2, 0XA0, 64*counter_1+1024*i, 2, &RX_arr[64*counter_1], 64, 1000);
 8001222:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001226:	011a      	lsls	r2, r3, #4
 8001228:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800122c:	4413      	add	r3, r2
 800122e:	b29b      	uxth	r3, r3
 8001230:	019b      	lsls	r3, r3, #6
 8001232:	b299      	uxth	r1, r3
 8001234:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001238:	019b      	lsls	r3, r3, #6
 800123a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800123e:	4413      	add	r3, r2
 8001240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001244:	9202      	str	r2, [sp, #8]
 8001246:	2240      	movs	r2, #64	; 0x40
 8001248:	9201      	str	r2, [sp, #4]
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2302      	movs	r3, #2
 800124e:	460a      	mov	r2, r1
 8001250:	21a0      	movs	r1, #160	; 0xa0
 8001252:	4845      	ldr	r0, [pc, #276]	; (8001368 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x348>)
 8001254:	f001 f856 	bl	8002304 <HAL_I2C_Mem_Write>
				HAL_Delay(10);
 8001258:	200a      	movs	r0, #10
 800125a:	f000 fbe3 	bl	8001a24 <HAL_Delay>
			for(int counter_1=0;counter_1<ceil(Reminder/64.0);counter_1++)
 800125e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001262:	3301      	adds	r3, #1
 8001264:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 8001268:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800126c:	f7ff f8ca 	bl	8000404 <__aeabi_i2d>
 8001270:	4604      	mov	r4, r0
 8001272:	460d      	mov	r5, r1
 8001274:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f8c3 	bl	8000404 <__aeabi_i2d>
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b37      	ldr	r3, [pc, #220]	; (8001360 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x340>)
 8001284:	f7ff fa52 	bl	800072c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f003 fa6a 	bl	8004768 <ceil>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4620      	mov	r0, r4
 800129a:	4629      	mov	r1, r5
 800129c:	f7ff fb8e 	bl	80009bc <__aeabi_dcmplt>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f47f af75 	bne.w	8001192 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x172>
			break;
 80012a8:	e030      	b.n	800130c <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x2ec>
		//HAL_UART_Transmit(&huart1,RX_arr,1024, HAL_MAX_DELAY);

		/*  HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
		 uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
		 */
		for(int counter_1=0;counter_1<16;counter_1++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 80012b0:	e022      	b.n	80012f8 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x2d8>
		{

			HAL_I2C_Mem_Write(&hi2c2, 0XA0, 64*counter_1+1024*i, 2, &RX_arr[64*counter_1], 64, 1000);
 80012b2:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80012b6:	011a      	lsls	r2, r3, #4
 80012b8:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	019b      	lsls	r3, r3, #6
 80012c2:	b299      	uxth	r1, r3
 80012c4:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80012ce:	4413      	add	r3, r2
 80012d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d4:	9202      	str	r2, [sp, #8]
 80012d6:	2240      	movs	r2, #64	; 0x40
 80012d8:	9201      	str	r2, [sp, #4]
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2302      	movs	r3, #2
 80012de:	460a      	mov	r2, r1
 80012e0:	21a0      	movs	r1, #160	; 0xa0
 80012e2:	4821      	ldr	r0, [pc, #132]	; (8001368 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x348>)
 80012e4:	f001 f80e 	bl	8002304 <HAL_I2C_Mem_Write>
			HAL_Delay(10);
 80012e8:	200a      	movs	r0, #10
 80012ea:	f000 fb9b 	bl	8001a24 <HAL_Delay>
		for(int counter_1=0;counter_1<16;counter_1++)
 80012ee:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80012f2:	3301      	adds	r3, #1
 80012f4:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 80012f8:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	ddd8      	ble.n	80012b2 <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x292>
	for (int i=0;i<ceil((file_size/1024.0));i++)
 8001300:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001304:	3301      	adds	r3, #1
 8001306:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800130a:	e000      	b.n	800130e <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x2ee>
		}

	}
}
 800130c:	e01e      	b.n	800134c <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x32c>
	for (int i=0;i<ceil((file_size/1024.0));i++)
 800130e:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 8001312:	f7ff f877 	bl	8000404 <__aeabi_i2d>
 8001316:	4604      	mov	r4, r0
 8001318:	460d      	mov	r5, r1
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	f7ff f871 	bl	8000404 <__aeabi_i2d>
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x34c>)
 8001328:	f7ff fa00 	bl	800072c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f003 fa18 	bl	8004768 <ceil>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f7ff fb3c 	bl	80009bc <__aeabi_dcmplt>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	f47f ae77 	bne.w	800103a <GSM_TO_STM_TO_EEPROM_FILE_SEND+0x1a>
}
 800134c:	bf00      	nop
 800134e:	f507 6793 	add.w	r7, r7, #1176	; 0x498
 8001352:	46bd      	mov	sp, r7
 8001354:	bdb0      	pop	{r4, r5, r7, pc}
 8001356:	bf00      	nop
 8001358:	0800499c 	.word	0x0800499c
 800135c:	200000f8 	.word	0x200000f8
 8001360:	40500000 	.word	0x40500000
 8001364:	3ff00000 	.word	0x3ff00000
 8001368:	200000a4 	.word	0x200000a4
 800136c:	40900000 	.word	0x40900000

08001370 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b090      	sub	sp, #64	; 0x40
 8001374:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	2228      	movs	r2, #40	; 0x28
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fd1e 	bl	8003dc0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a0:	2301      	movs	r3, #1
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a4:	2302      	movs	r3, #2
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 fe5f 	bl	800307c <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80013c4:	f000 f920 	bl	8001608 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	230f      	movs	r3, #15
 80013ca:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013cc:	2302      	movs	r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2102      	movs	r1, #2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 f8ca 	bl	800357c <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x82>
	{
		Error_Handler();
 80013ee:	f000 f90b 	bl	8001608 <Error_Handler>
	}
}
 80013f2:	bf00      	nop
 80013f4:	3740      	adds	r7, #64	; 0x40
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_CRC_Init+0x20>)
 8001402:	4a07      	ldr	r2, [pc, #28]	; (8001420 <MX_CRC_Init+0x24>)
 8001404:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_CRC_Init+0x20>)
 8001408:	f000 fc3d 	bl	8001c86 <HAL_CRC_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 8001412:	f000 f8f9 	bl	8001608 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000009c 	.word	0x2000009c
 8001420:	40023000 	.word	0x40023000

08001424 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_I2C2_Init+0x50>)
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <MX_I2C2_Init+0x54>)
 800142c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_I2C2_Init+0x50>)
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_I2C2_Init+0x58>)
 8001432:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_I2C2_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_I2C2_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_I2C2_Init+0x50>)
 8001442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001446:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <MX_I2C2_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_I2C2_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <MX_I2C2_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_I2C2_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_I2C2_Init+0x50>)
 8001462:	f000 fe0b 	bl	800207c <HAL_I2C_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 800146c:	f000 f8cc 	bl	8001608 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200000a4 	.word	0x200000a4
 8001478:	40005800 	.word	0x40005800
 800147c:	000186a0 	.word	0x000186a0

08001480 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_USART1_UART_Init+0x50>)
 8001488:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 80014b8:	f002 f9fa 	bl	80038b0 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80014c2:	f000 f8a1 	bl	8001608 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000f8 	.word	0x200000f8
 80014d0:	40013800 	.word	0x40013800

080014d4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_USART2_UART_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 80014e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_USART2_UART_Init+0x4c>)
 800150c:	f002 f9d0 	bl	80038b0 <HAL_UART_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001516:	f000 f877 	bl	8001608 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000013c 	.word	0x2000013c
 8001524:	40004400 	.word	0x40004400

08001528 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <MX_GPIO_Init+0xd0>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a2d      	ldr	r2, [pc, #180]	; (80015f8 <MX_GPIO_Init+0xd0>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <MX_GPIO_Init+0xd0>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <MX_GPIO_Init+0xd0>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <MX_GPIO_Init+0xd0>)
 800155a:	f043 0320 	orr.w	r3, r3, #32
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <MX_GPIO_Init+0xd0>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <MX_GPIO_Init+0xd0>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <MX_GPIO_Init+0xd0>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_GPIO_Init+0xd0>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_GPIO_Init+0xd0>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <MX_GPIO_Init+0xd0>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_GPIO_Init+0xd0>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <MX_GPIO_Init+0xd4>)
 80015a4:	f000 fd3a 	bl	800201c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4619      	mov	r1, r3
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <MX_GPIO_Init+0xd4>)
 80015c2:	f000 fba7 	bl	8001d14 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_GPIO_Init+0xd8>)
 80015ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4619      	mov	r1, r3
 80015da:	480a      	ldr	r0, [pc, #40]	; (8001604 <MX_GPIO_Init+0xdc>)
 80015dc:	f000 fb9a 	bl	8001d14 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2028      	movs	r0, #40	; 0x28
 80015e6:	f000 fb18 	bl	8001c1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ea:	2028      	movs	r0, #40	; 0x28
 80015ec:	f000 fb31 	bl	8001c52 <HAL_NVIC_EnableIRQ>

}
 80015f0:	bf00      	nop
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40011000 	.word	0x40011000
 8001600:	10110000 	.word	0x10110000
 8001604:	40010800 	.word	0x40010800

08001608 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001610:	e7fe      	b.n	8001610 <Error_Handler+0x8>
	...

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a14      	ldr	r2, [pc, #80]	; (8001670 <HAL_MspInit+0x5c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_MspInit+0x5c>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_MspInit+0x5c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	61d3      	str	r3, [r2, #28]
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_MspInit+0x5c>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_MspInit+0x60>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_MspInit+0x60>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40021000 	.word	0x40021000
 8001674:	40010000 	.word	0x40010000

08001678 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_CRC_MspInit+0x34>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d10b      	bne.n	80016a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_CRC_MspInit+0x38>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <HAL_CRC_MspInit+0x38>)
 8001690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001694:	6153      	str	r3, [r2, #20]
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_CRC_MspInit+0x38>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40023000 	.word	0x40023000
 80016b0:	40021000 	.word	0x40021000

080016b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a16      	ldr	r2, [pc, #88]	; (8001728 <HAL_I2C_MspInit+0x74>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d124      	bne.n	800171e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_I2C_MspInit+0x78>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <HAL_I2C_MspInit+0x78>)
 80016da:	f043 0308 	orr.w	r3, r3, #8
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_I2C_MspInit+0x78>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f2:	2312      	movs	r3, #18
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4619      	mov	r1, r3
 8001700:	480b      	ldr	r0, [pc, #44]	; (8001730 <HAL_I2C_MspInit+0x7c>)
 8001702:	f000 fb07 	bl	8001d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_I2C_MspInit+0x78>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_I2C_MspInit+0x78>)
 800170c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_I2C_MspInit+0x78>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40005800 	.word	0x40005800
 800172c:	40021000 	.word	0x40021000
 8001730:	40010c00 	.word	0x40010c00

08001734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a37      	ldr	r2, [pc, #220]	; (800182c <HAL_UART_MspInit+0xf8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d132      	bne.n	80017ba <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001754:	4b36      	ldr	r3, [pc, #216]	; (8001830 <HAL_UART_MspInit+0xfc>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a35      	ldr	r2, [pc, #212]	; (8001830 <HAL_UART_MspInit+0xfc>)
 800175a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b33      	ldr	r3, [pc, #204]	; (8001830 <HAL_UART_MspInit+0xfc>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_UART_MspInit+0xfc>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a2f      	ldr	r2, [pc, #188]	; (8001830 <HAL_UART_MspInit+0xfc>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <HAL_UART_MspInit+0xfc>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0318 	add.w	r3, r7, #24
 8001796:	4619      	mov	r1, r3
 8001798:	4826      	ldr	r0, [pc, #152]	; (8001834 <HAL_UART_MspInit+0x100>)
 800179a:	f000 fabb 	bl	8001d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800179e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0318 	add.w	r3, r7, #24
 80017b0:	4619      	mov	r1, r3
 80017b2:	4820      	ldr	r0, [pc, #128]	; (8001834 <HAL_UART_MspInit+0x100>)
 80017b4:	f000 faae 	bl	8001d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017b8:	e034      	b.n	8001824 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <HAL_UART_MspInit+0x104>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d12f      	bne.n	8001824 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_UART_MspInit+0xfc>)
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_UART_MspInit+0xfc>)
 80017ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ce:	61d3      	str	r3, [r2, #28]
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_UART_MspInit+0xfc>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_UART_MspInit+0xfc>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a13      	ldr	r2, [pc, #76]	; (8001830 <HAL_UART_MspInit+0xfc>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_UART_MspInit+0xfc>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017f4:	2304      	movs	r3, #4
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0318 	add.w	r3, r7, #24
 8001804:	4619      	mov	r1, r3
 8001806:	480b      	ldr	r0, [pc, #44]	; (8001834 <HAL_UART_MspInit+0x100>)
 8001808:	f000 fa84 	bl	8001d14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800180c:	2308      	movs	r3, #8
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0318 	add.w	r3, r7, #24
 800181c:	4619      	mov	r1, r3
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_UART_MspInit+0x100>)
 8001820:	f000 fa78 	bl	8001d14 <HAL_GPIO_Init>
}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40013800 	.word	0x40013800
 8001830:	40021000 	.word	0x40021000
 8001834:	40010800 	.word	0x40010800
 8001838:	40004400 	.word	0x40004400

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <NMI_Handler+0x4>

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001882:	f000 f8b3 	bl	80019ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}

0800188a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800188e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001892:	f000 fbdb 	bl	800204c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <_sbrk+0x5c>)
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <_sbrk+0x60>)
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <_sbrk+0x64>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <_sbrk+0x68>)
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d207      	bcs.n	80018dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018cc:	f002 fa4e 	bl	8003d6c <__errno>
 80018d0:	4603      	mov	r3, r0
 80018d2:	220c      	movs	r2, #12
 80018d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	e009      	b.n	80018f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <_sbrk+0x64>)
 80018ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20005000 	.word	0x20005000
 80018fc:	00000400 	.word	0x00000400
 8001900:	20000090 	.word	0x20000090
 8001904:	20000198 	.word	0x20000198

08001908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001916:	490d      	ldr	r1, [pc, #52]	; (800194c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800192c:	4c0a      	ldr	r4, [pc, #40]	; (8001958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800193a:	f7ff ffe5 	bl	8001908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193e:	f002 fa1b 	bl	8003d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001942:	f7ff f883 	bl	8000a4c <main>
  bx lr
 8001946:	4770      	bx	lr
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001950:	08004b2c 	.word	0x08004b2c
  ldr r2, =_sbss
 8001954:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001958:	20000194 	.word	0x20000194

0800195c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC1_2_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_Init+0x28>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_Init+0x28>)
 800196a:	f043 0310 	orr.w	r3, r3, #16
 800196e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f000 f947 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f808 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197c:	f7ff fe4a 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40022000 	.word	0x40022000

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_InitTick+0x54>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_InitTick+0x58>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f95f 	bl	8001c6e <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00e      	b.n	80019d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b0f      	cmp	r3, #15
 80019be:	d80a      	bhi.n	80019d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c0:	2200      	movs	r2, #0
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f000 f927 	bl	8001c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <HAL_InitTick+0x5c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000008 	.word	0x20000008
 80019e8:	20000004 	.word	0x20000004

080019ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_IncTick+0x1c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_IncTick+0x20>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <HAL_IncTick+0x20>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000180 	.word	0x20000180

08001a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <HAL_GetTick+0x10>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	20000180 	.word	0x20000180

08001a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff fff0 	bl	8001a10 <HAL_GetTick>
 8001a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	d005      	beq.n	8001a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_Delay+0x44>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a4a:	bf00      	nop
 8001a4c:	f7ff ffe0 	bl	8001a10 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d8f7      	bhi.n	8001a4c <HAL_Delay+0x28>
  {
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4906      	ldr	r1, [pc, #24]	; (8001b04 <__NVIC_EnableIRQ+0x34>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff90 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff2d 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff42 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff90 	bl	8001b5c <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5f 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff35 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffa2 	bl	8001bc0 <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e00e      	b.n	8001cb6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	795b      	ldrb	r3, [r3, #5]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d105      	bne.n	8001cae <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fce5 	bl	8001678 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b087      	sub	sp, #28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e00a      	b.n	8001cf0 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	441a      	add	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3f0      	bcc.n	8001cda <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001d06:	693b      	ldr	r3, [r7, #16]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b08b      	sub	sp, #44	; 0x2c
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	e169      	b.n	8001ffc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f040 8158 	bne.w	8001ff6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4a9a      	ldr	r2, [pc, #616]	; (8001fb4 <HAL_GPIO_Init+0x2a0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d05e      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d50:	4a98      	ldr	r2, [pc, #608]	; (8001fb4 <HAL_GPIO_Init+0x2a0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d875      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d56:	4a98      	ldr	r2, [pc, #608]	; (8001fb8 <HAL_GPIO_Init+0x2a4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d058      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d5c:	4a96      	ldr	r2, [pc, #600]	; (8001fb8 <HAL_GPIO_Init+0x2a4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d86f      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d62:	4a96      	ldr	r2, [pc, #600]	; (8001fbc <HAL_GPIO_Init+0x2a8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d052      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d68:	4a94      	ldr	r2, [pc, #592]	; (8001fbc <HAL_GPIO_Init+0x2a8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d869      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d6e:	4a94      	ldr	r2, [pc, #592]	; (8001fc0 <HAL_GPIO_Init+0x2ac>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d04c      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d74:	4a92      	ldr	r2, [pc, #584]	; (8001fc0 <HAL_GPIO_Init+0x2ac>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d863      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d7a:	4a92      	ldr	r2, [pc, #584]	; (8001fc4 <HAL_GPIO_Init+0x2b0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d046      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d80:	4a90      	ldr	r2, [pc, #576]	; (8001fc4 <HAL_GPIO_Init+0x2b0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d85d      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d82a      	bhi.n	8001de0 <HAL_GPIO_Init+0xcc>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d859      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <HAL_GPIO_Init+0x80>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001e0f 	.word	0x08001e0f
 8001d98:	08001de9 	.word	0x08001de9
 8001d9c:	08001dfb 	.word	0x08001dfb
 8001da0:	08001e3d 	.word	0x08001e3d
 8001da4:	08001e43 	.word	0x08001e43
 8001da8:	08001e43 	.word	0x08001e43
 8001dac:	08001e43 	.word	0x08001e43
 8001db0:	08001e43 	.word	0x08001e43
 8001db4:	08001e43 	.word	0x08001e43
 8001db8:	08001e43 	.word	0x08001e43
 8001dbc:	08001e43 	.word	0x08001e43
 8001dc0:	08001e43 	.word	0x08001e43
 8001dc4:	08001e43 	.word	0x08001e43
 8001dc8:	08001e43 	.word	0x08001e43
 8001dcc:	08001e43 	.word	0x08001e43
 8001dd0:	08001e43 	.word	0x08001e43
 8001dd4:	08001e43 	.word	0x08001e43
 8001dd8:	08001df1 	.word	0x08001df1
 8001ddc:	08001e05 	.word	0x08001e05
 8001de0:	4a79      	ldr	r2, [pc, #484]	; (8001fc8 <HAL_GPIO_Init+0x2b4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de6:	e02c      	b.n	8001e42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e029      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	3304      	adds	r3, #4
 8001df6:	623b      	str	r3, [r7, #32]
          break;
 8001df8:	e024      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	3308      	adds	r3, #8
 8001e00:	623b      	str	r3, [r7, #32]
          break;
 8001e02:	e01f      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	330c      	adds	r3, #12
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e01a      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e16:	2304      	movs	r3, #4
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e013      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e24:	2308      	movs	r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	611a      	str	r2, [r3, #16]
          break;
 8001e2e:	e009      	b.n	8001e44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e30:	2308      	movs	r3, #8
 8001e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	615a      	str	r2, [r3, #20]
          break;
 8001e3a:	e003      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
          break;
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          break;
 8001e42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2bff      	cmp	r3, #255	; 0xff
 8001e48:	d801      	bhi.n	8001e4e <HAL_GPIO_Init+0x13a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	e001      	b.n	8001e52 <HAL_GPIO_Init+0x13e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3304      	adds	r3, #4
 8001e52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2bff      	cmp	r3, #255	; 0xff
 8001e58:	d802      	bhi.n	8001e60 <HAL_GPIO_Init+0x14c>
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x152>
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	3b08      	subs	r3, #8
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	210f      	movs	r1, #15
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	401a      	ands	r2, r3
 8001e78:	6a39      	ldr	r1, [r7, #32]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	431a      	orrs	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80b1 	beq.w	8001ff6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e94:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <HAL_GPIO_Init+0x2b8>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a4c      	ldr	r2, [pc, #304]	; (8001fcc <HAL_GPIO_Init+0x2b8>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <HAL_GPIO_Init+0x2b8>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eac:	4a48      	ldr	r2, [pc, #288]	; (8001fd0 <HAL_GPIO_Init+0x2bc>)
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a40      	ldr	r2, [pc, #256]	; (8001fd4 <HAL_GPIO_Init+0x2c0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d013      	beq.n	8001f00 <HAL_GPIO_Init+0x1ec>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a3f      	ldr	r2, [pc, #252]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00d      	beq.n	8001efc <HAL_GPIO_Init+0x1e8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3e      	ldr	r2, [pc, #248]	; (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d007      	beq.n	8001ef8 <HAL_GPIO_Init+0x1e4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3d      	ldr	r2, [pc, #244]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <HAL_GPIO_Init+0x1e0>
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e006      	b.n	8001f02 <HAL_GPIO_Init+0x1ee>
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	e004      	b.n	8001f02 <HAL_GPIO_Init+0x1ee>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x1ee>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_GPIO_Init+0x1ee>
 8001f00:	2300      	movs	r3, #0
 8001f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f04:	f002 0203 	and.w	r2, r2, #3
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	4093      	lsls	r3, r2
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f12:	492f      	ldr	r1, [pc, #188]	; (8001fd0 <HAL_GPIO_Init+0x2bc>)
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	492c      	ldr	r1, [pc, #176]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	4928      	ldr	r1, [pc, #160]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4922      	ldr	r1, [pc, #136]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	491e      	ldr	r1, [pc, #120]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	4918      	ldr	r1, [pc, #96]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f8a:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4914      	ldr	r1, [pc, #80]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d021      	beq.n	8001fe8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	490e      	ldr	r1, [pc, #56]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60cb      	str	r3, [r1, #12]
 8001fb0:	e021      	b.n	8001ff6 <HAL_GPIO_Init+0x2e2>
 8001fb2:	bf00      	nop
 8001fb4:	10320000 	.word	0x10320000
 8001fb8:	10310000 	.word	0x10310000
 8001fbc:	10220000 	.word	0x10220000
 8001fc0:	10210000 	.word	0x10210000
 8001fc4:	10120000 	.word	0x10120000
 8001fc8:	10110000 	.word	0x10110000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40010800 	.word	0x40010800
 8001fd8:	40010c00 	.word	0x40010c00
 8001fdc:	40011000 	.word	0x40011000
 8001fe0:	40011400 	.word	0x40011400
 8001fe4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_GPIO_Init+0x304>)
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	4909      	ldr	r1, [pc, #36]	; (8002018 <HAL_GPIO_Init+0x304>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	fa22 f303 	lsr.w	r3, r2, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	f47f ae8e 	bne.w	8001d28 <HAL_GPIO_Init+0x14>
  }
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	372c      	adds	r7, #44	; 0x2c
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	40010400 	.word	0x40010400

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002038:	e003      	b.n	8002042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800203a:	887b      	ldrh	r3, [r7, #2]
 800203c:	041a      	lsls	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	611a      	str	r2, [r3, #16]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fe64 	bl	8000d38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40010400 	.word	0x40010400

0800207c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e12b      	b.n	80022e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fb06 	bl	80016b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2224      	movs	r2, #36	; 0x24
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020e0:	f001 fba0 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 80020e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4a81      	ldr	r2, [pc, #516]	; (80022f0 <HAL_I2C_Init+0x274>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d807      	bhi.n	8002100 <HAL_I2C_Init+0x84>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a80      	ldr	r2, [pc, #512]	; (80022f4 <HAL_I2C_Init+0x278>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	bf94      	ite	ls
 80020f8:	2301      	movls	r3, #1
 80020fa:	2300      	movhi	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	e006      	b.n	800210e <HAL_I2C_Init+0x92>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a7d      	ldr	r2, [pc, #500]	; (80022f8 <HAL_I2C_Init+0x27c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	bf94      	ite	ls
 8002108:	2301      	movls	r3, #1
 800210a:	2300      	movhi	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0e7      	b.n	80022e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4a78      	ldr	r2, [pc, #480]	; (80022fc <HAL_I2C_Init+0x280>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0c9b      	lsrs	r3, r3, #18
 8002120:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	430a      	orrs	r2, r1
 8002134:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a6a      	ldr	r2, [pc, #424]	; (80022f0 <HAL_I2C_Init+0x274>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d802      	bhi.n	8002150 <HAL_I2C_Init+0xd4>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	3301      	adds	r3, #1
 800214e:	e009      	b.n	8002164 <HAL_I2C_Init+0xe8>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	4a69      	ldr	r2, [pc, #420]	; (8002300 <HAL_I2C_Init+0x284>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	099b      	lsrs	r3, r3, #6
 8002162:	3301      	adds	r3, #1
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	430b      	orrs	r3, r1
 800216a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002176:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	495c      	ldr	r1, [pc, #368]	; (80022f0 <HAL_I2C_Init+0x274>)
 8002180:	428b      	cmp	r3, r1
 8002182:	d819      	bhi.n	80021b8 <HAL_I2C_Init+0x13c>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1e59      	subs	r1, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002192:	1c59      	adds	r1, r3, #1
 8002194:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002198:	400b      	ands	r3, r1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_I2C_Init+0x138>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1e59      	subs	r1, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b2:	e051      	b.n	8002258 <HAL_I2C_Init+0x1dc>
 80021b4:	2304      	movs	r3, #4
 80021b6:	e04f      	b.n	8002258 <HAL_I2C_Init+0x1dc>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d111      	bne.n	80021e4 <HAL_I2C_Init+0x168>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1e58      	subs	r0, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	440b      	add	r3, r1
 80021ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d2:	3301      	adds	r3, #1
 80021d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	e012      	b.n	800220a <HAL_I2C_Init+0x18e>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1e58      	subs	r0, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	0099      	lsls	r1, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Init+0x196>
 800220e:	2301      	movs	r3, #1
 8002210:	e022      	b.n	8002258 <HAL_I2C_Init+0x1dc>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10e      	bne.n	8002238 <HAL_I2C_Init+0x1bc>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1e58      	subs	r0, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6859      	ldr	r1, [r3, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	440b      	add	r3, r1
 8002228:	fbb0 f3f3 	udiv	r3, r0, r3
 800222c:	3301      	adds	r3, #1
 800222e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002236:	e00f      	b.n	8002258 <HAL_I2C_Init+0x1dc>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1e58      	subs	r0, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	0099      	lsls	r1, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	fbb0 f3f3 	udiv	r3, r0, r3
 800224e:	3301      	adds	r3, #1
 8002250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	6809      	ldr	r1, [r1, #0]
 800225c:	4313      	orrs	r3, r2
 800225e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002286:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6911      	ldr	r1, [r2, #16]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68d2      	ldr	r2, [r2, #12]
 8002292:	4311      	orrs	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	000186a0 	.word	0x000186a0
 80022f4:	001e847f 	.word	0x001e847f
 80022f8:	003d08ff 	.word	0x003d08ff
 80022fc:	431bde83 	.word	0x431bde83
 8002300:	10624dd3 	.word	0x10624dd3

08002304 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	4608      	mov	r0, r1
 800230e:	4611      	mov	r1, r2
 8002310:	461a      	mov	r2, r3
 8002312:	4603      	mov	r3, r0
 8002314:	817b      	strh	r3, [r7, #10]
 8002316:	460b      	mov	r3, r1
 8002318:	813b      	strh	r3, [r7, #8]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800231e:	f7ff fb77 	bl	8001a10 <HAL_GetTick>
 8002322:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b20      	cmp	r3, #32
 800232e:	f040 80d9 	bne.w	80024e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2319      	movs	r3, #25
 8002338:	2201      	movs	r2, #1
 800233a:	496d      	ldr	r1, [pc, #436]	; (80024f0 <HAL_I2C_Mem_Write+0x1ec>)
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 fcc1 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
 800234a:	e0cc      	b.n	80024e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_I2C_Mem_Write+0x56>
 8002356:	2302      	movs	r3, #2
 8002358:	e0c5      	b.n	80024e6 <HAL_I2C_Mem_Write+0x1e2>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d007      	beq.n	8002380 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800238e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2221      	movs	r2, #33	; 0x21
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2240      	movs	r2, #64	; 0x40
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a3a      	ldr	r2, [r7, #32]
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a4d      	ldr	r2, [pc, #308]	; (80024f4 <HAL_I2C_Mem_Write+0x1f0>)
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023c2:	88f8      	ldrh	r0, [r7, #6]
 80023c4:	893a      	ldrh	r2, [r7, #8]
 80023c6:	8979      	ldrh	r1, [r7, #10]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	4603      	mov	r3, r0
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 faf8 	bl	80029c8 <I2C_RequestMemoryWrite>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d052      	beq.n	8002484 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e081      	b.n	80024e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fd42 	bl	8002e70 <I2C_WaitOnTXEFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00d      	beq.n	800240e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d107      	bne.n	800240a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002408:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e06b      	b.n	80024e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	781a      	ldrb	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b04      	cmp	r3, #4
 800244a:	d11b      	bne.n	8002484 <HAL_I2C_Mem_Write+0x180>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	d017      	beq.n	8002484 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1aa      	bne.n	80023e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fd2e 	bl	8002ef2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00d      	beq.n	80024b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d107      	bne.n	80024b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e016      	b.n	80024e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e000      	b.n	80024e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
  }
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	00100002 	.word	0x00100002
 80024f4:	ffff0000 	.word	0xffff0000

080024f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	; 0x30
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	4608      	mov	r0, r1
 8002502:	4611      	mov	r1, r2
 8002504:	461a      	mov	r2, r3
 8002506:	4603      	mov	r3, r0
 8002508:	817b      	strh	r3, [r7, #10]
 800250a:	460b      	mov	r3, r1
 800250c:	813b      	strh	r3, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002516:	f7ff fa7b 	bl	8001a10 <HAL_GetTick>
 800251a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b20      	cmp	r3, #32
 8002526:	f040 8244 	bne.w	80029b2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2319      	movs	r3, #25
 8002530:	2201      	movs	r2, #1
 8002532:	4982      	ldr	r1, [pc, #520]	; (800273c <HAL_I2C_Mem_Read+0x244>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fbc5 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
 8002542:	e237      	b.n	80029b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Mem_Read+0x5a>
 800254e:	2302      	movs	r3, #2
 8002550:	e230      	b.n	80029b4 <HAL_I2C_Mem_Read+0x4bc>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d007      	beq.n	8002578 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002586:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2222      	movs	r2, #34	; 0x22
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2240      	movs	r2, #64	; 0x40
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a62      	ldr	r2, [pc, #392]	; (8002740 <HAL_I2C_Mem_Read+0x248>)
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025ba:	88f8      	ldrh	r0, [r7, #6]
 80025bc:	893a      	ldrh	r2, [r7, #8]
 80025be:	8979      	ldrh	r1, [r7, #10]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	4603      	mov	r3, r0
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fa92 	bl	8002af4 <I2C_RequestMemoryRead>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e1ec      	b.n	80029b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d113      	bne.n	800260a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e1c0      	b.n	800298c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b01      	cmp	r3, #1
 8002610:	d11e      	bne.n	8002650 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002620:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002622:	b672      	cpsid	i
}
 8002624:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800264c:	b662      	cpsie	i
}
 800264e:	e035      	b.n	80026bc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	2b02      	cmp	r3, #2
 8002656:	d11e      	bne.n	8002696 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002666:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002668:	b672      	cpsid	i
}
 800266a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002690:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002692:	b662      	cpsie	i
}
 8002694:	e012      	b.n	80026bc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026a4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80026bc:	e166      	b.n	800298c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	f200 811f 	bhi.w	8002906 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d123      	bne.n	8002718 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fc4d 	bl	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e167      	b.n	80029b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002716:	e139      	b.n	800298c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	2b02      	cmp	r3, #2
 800271e:	d152      	bne.n	80027c6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	2200      	movs	r2, #0
 8002728:	4906      	ldr	r1, [pc, #24]	; (8002744 <HAL_I2C_Mem_Read+0x24c>)
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 faca 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e13c      	b.n	80029b4 <HAL_I2C_Mem_Read+0x4bc>
 800273a:	bf00      	nop
 800273c:	00100002 	.word	0x00100002
 8002740:	ffff0000 	.word	0xffff0000
 8002744:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002748:	b672      	cpsid	i
}
 800274a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800278e:	b662      	cpsie	i
}
 8002790:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027c4:	e0e2      	b.n	800298c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	2200      	movs	r2, #0
 80027ce:	497b      	ldr	r1, [pc, #492]	; (80029bc <HAL_I2C_Mem_Read+0x4c4>)
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fa77 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0e9      	b.n	80029b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027f0:	b672      	cpsid	i
}
 80027f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	3b01      	subs	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002826:	4b66      	ldr	r3, [pc, #408]	; (80029c0 <HAL_I2C_Mem_Read+0x4c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	08db      	lsrs	r3, r3, #3
 800282c:	4a65      	ldr	r2, [pc, #404]	; (80029c4 <HAL_I2C_Mem_Read+0x4cc>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0a1a      	lsrs	r2, r3, #8
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00da      	lsls	r2, r3, #3
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	3b01      	subs	r3, #1
 8002844:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d118      	bne.n	800287e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800286e:	b662      	cpsie	i
}
 8002870:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e09a      	b.n	80029b4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b04      	cmp	r3, #4
 800288a:	d1d9      	bne.n	8002840 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028ce:	b662      	cpsie	i
}
 80028d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002904:	e042      	b.n	800298c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002908:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fb32 	bl	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e04c      	b.n	80029b4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b04      	cmp	r3, #4
 8002958:	d118      	bne.n	800298c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	2b00      	cmp	r3, #0
 8002992:	f47f ae94 	bne.w	80026be <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80029b2:	2302      	movs	r3, #2
  }
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	00010004 	.word	0x00010004
 80029c0:	20000000 	.word	0x20000000
 80029c4:	14f8b589 	.word	0x14f8b589

080029c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	817b      	strh	r3, [r7, #10]
 80029da:	460b      	mov	r3, r1
 80029dc:	813b      	strh	r3, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f960 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a18:	d103      	bne.n	8002a22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e05f      	b.n	8002ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a26:	897b      	ldrh	r3, [r7, #10]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	6a3a      	ldr	r2, [r7, #32]
 8002a3a:	492d      	ldr	r1, [pc, #180]	; (8002af0 <I2C_RequestMemoryWrite+0x128>)
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f998 	bl	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e04c      	b.n	8002ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a64:	6a39      	ldr	r1, [r7, #32]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fa02 	bl	8002e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d107      	bne.n	8002a8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e02b      	b.n	8002ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a94:	893b      	ldrh	r3, [r7, #8]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	611a      	str	r2, [r3, #16]
 8002a9e:	e021      	b.n	8002ae4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002aa0:	893b      	ldrh	r3, [r7, #8]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab0:	6a39      	ldr	r1, [r7, #32]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f9dc 	bl	8002e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d107      	bne.n	8002ad6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e005      	b.n	8002ae6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ada:	893b      	ldrh	r3, [r7, #8]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	00010002 	.word	0x00010002

08002af4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	4608      	mov	r0, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	461a      	mov	r2, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	817b      	strh	r3, [r7, #10]
 8002b06:	460b      	mov	r3, r1
 8002b08:	813b      	strh	r3, [r7, #8]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f8c2 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b54:	d103      	bne.n	8002b5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e0aa      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	6a3a      	ldr	r2, [r7, #32]
 8002b76:	4952      	ldr	r1, [pc, #328]	; (8002cc0 <I2C_RequestMemoryRead+0x1cc>)
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f8fa 	bl	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e097      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	6a39      	ldr	r1, [r7, #32]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f964 	bl	8002e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d107      	bne.n	8002bc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e076      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd0:	893b      	ldrh	r3, [r7, #8]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]
 8002bda:	e021      	b.n	8002c20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bdc:	893b      	ldrh	r3, [r7, #8]
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bec:	6a39      	ldr	r1, [r7, #32]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f93e 	bl	8002e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d107      	bne.n	8002c12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e050      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c16:	893b      	ldrh	r3, [r7, #8]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c22:	6a39      	ldr	r1, [r7, #32]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f923 	bl	8002e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d107      	bne.n	8002c48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e035      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f82b 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00d      	beq.n	8002c90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c82:	d103      	bne.n	8002c8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e013      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c90:	897b      	ldrh	r3, [r7, #10]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	6a3a      	ldr	r2, [r7, #32]
 8002ca4:	4906      	ldr	r1, [pc, #24]	; (8002cc0 <I2C_RequestMemoryRead+0x1cc>)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f863 	bl	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	00010002 	.word	0x00010002

08002cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd4:	e025      	b.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d021      	beq.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7fe fe97 	bl	8001a10 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d116      	bne.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e023      	b.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d10d      	bne.n	8002d48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4013      	ands	r3, r2
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	e00c      	b.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4013      	ands	r3, r2
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d0b6      	beq.n	8002cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d80:	e051      	b.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d90:	d123      	bne.n	8002dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002daa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f043 0204 	orr.w	r2, r3, #4
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e046      	b.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d021      	beq.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7fe fe15 	bl	8001a10 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d116      	bne.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f043 0220 	orr.w	r2, r3, #32
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e020      	b.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d10c      	bne.n	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bf14      	ite	ne
 8002e42:	2301      	movne	r3, #1
 8002e44:	2300      	moveq	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	e00b      	b.n	8002e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	43da      	mvns	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d18d      	bne.n	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e7c:	e02d      	b.n	8002eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f8ce 	bl	8003020 <I2C_IsAcknowledgeFailed>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e02d      	b.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d021      	beq.n	8002eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fe fdbb 	bl	8001a10 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d116      	bne.n	8002eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e007      	b.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	2b80      	cmp	r3, #128	; 0x80
 8002ee6:	d1ca      	bne.n	8002e7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002efe:	e02d      	b.n	8002f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f88d 	bl	8003020 <I2C_IsAcknowledgeFailed>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e02d      	b.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f16:	d021      	beq.n	8002f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f18:	f7fe fd7a 	bl	8001a10 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d302      	bcc.n	8002f2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e007      	b.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d1ca      	bne.n	8002f00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f80:	e042      	b.n	8003008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d119      	bne.n	8002fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0210 	mvn.w	r2, #16
 8002f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e029      	b.n	8003018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc4:	f7fe fd24 	bl	8001a10 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d302      	bcc.n	8002fda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d116      	bne.n	8003008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e007      	b.n	8003018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d1b5      	bne.n	8002f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003036:	d11b      	bne.n	8003070 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003040:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f043 0204 	orr.w	r2, r3, #4
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e26c      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8087 	beq.w	80031aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800309c:	4b92      	ldr	r3, [pc, #584]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d00c      	beq.n	80030c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030a8:	4b8f      	ldr	r3, [pc, #572]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d112      	bne.n	80030da <HAL_RCC_OscConfig+0x5e>
 80030b4:	4b8c      	ldr	r3, [pc, #560]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c0:	d10b      	bne.n	80030da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c2:	4b89      	ldr	r3, [pc, #548]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d06c      	beq.n	80031a8 <HAL_RCC_OscConfig+0x12c>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d168      	bne.n	80031a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e246      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e2:	d106      	bne.n	80030f2 <HAL_RCC_OscConfig+0x76>
 80030e4:	4b80      	ldr	r3, [pc, #512]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a7f      	ldr	r2, [pc, #508]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e02e      	b.n	8003150 <HAL_RCC_OscConfig+0xd4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0x98>
 80030fa:	4b7b      	ldr	r3, [pc, #492]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a7a      	ldr	r2, [pc, #488]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b78      	ldr	r3, [pc, #480]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a77      	ldr	r2, [pc, #476]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800310c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e01d      	b.n	8003150 <HAL_RCC_OscConfig+0xd4>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0xbc>
 800311e:	4b72      	ldr	r3, [pc, #456]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a71      	ldr	r2, [pc, #452]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6e      	ldr	r2, [pc, #440]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xd4>
 8003138:	4b6b      	ldr	r3, [pc, #428]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a6a      	ldr	r2, [pc, #424]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b68      	ldr	r3, [pc, #416]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a67      	ldr	r2, [pc, #412]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fe fc5a 	bl	8001a10 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7fe fc56 	bl	8001a10 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e1fa      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b5d      	ldr	r3, [pc, #372]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0xe4>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe fc46 	bl	8001a10 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003188:	f7fe fc42 	bl	8001a10 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1e6      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x10c>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d063      	beq.n	800327e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031b6:	4b4c      	ldr	r3, [pc, #304]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031c2:	4b49      	ldr	r3, [pc, #292]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d11c      	bne.n	8003208 <HAL_RCC_OscConfig+0x18c>
 80031ce:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031da:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_RCC_OscConfig+0x176>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e1ba      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4939      	ldr	r1, [pc, #228]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	e03a      	b.n	800327e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003210:	4b36      	ldr	r3, [pc, #216]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003216:	f7fe fbfb 	bl	8001a10 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321e:	f7fe fbf7 	bl	8001a10 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e19b      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4927      	ldr	r1, [pc, #156]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]
 8003250:	e015      	b.n	800327e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003252:	4b26      	ldr	r3, [pc, #152]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe fbda 	bl	8001a10 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003260:	f7fe fbd6 	bl	8001a10 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e17a      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d03a      	beq.n	8003300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d019      	beq.n	80032c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003292:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003298:	f7fe fbba 	bl	8001a10 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a0:	f7fe fbb6 	bl	8001a10 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e15a      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032be:	2001      	movs	r0, #1
 80032c0:	f000 fad8 	bl	8003874 <RCC_Delay>
 80032c4:	e01c      	b.n	8003300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032cc:	f7fe fba0 	bl	8001a10 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d2:	e00f      	b.n	80032f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fe fb9c 	bl	8001a10 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d908      	bls.n	80032f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e140      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000
 80032ec:	42420000 	.word	0x42420000
 80032f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f4:	4b9e      	ldr	r3, [pc, #632]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e9      	bne.n	80032d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80a6 	beq.w	800345a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330e:	2300      	movs	r3, #0
 8003310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003312:	4b97      	ldr	r3, [pc, #604]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10d      	bne.n	800333a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331e:	4b94      	ldr	r3, [pc, #592]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	4a93      	ldr	r2, [pc, #588]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	61d3      	str	r3, [r2, #28]
 800332a:	4b91      	ldr	r3, [pc, #580]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b8e      	ldr	r3, [pc, #568]	; (8003574 <HAL_RCC_OscConfig+0x4f8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d118      	bne.n	8003378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b8b      	ldr	r3, [pc, #556]	; (8003574 <HAL_RCC_OscConfig+0x4f8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a8a      	ldr	r2, [pc, #552]	; (8003574 <HAL_RCC_OscConfig+0x4f8>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fe fb5d 	bl	8001a10 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7fe fb59 	bl	8001a10 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	; 0x64
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0fd      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b81      	ldr	r3, [pc, #516]	; (8003574 <HAL_RCC_OscConfig+0x4f8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x312>
 8003380:	4b7b      	ldr	r3, [pc, #492]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4a7a      	ldr	r2, [pc, #488]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6213      	str	r3, [r2, #32]
 800338c:	e02d      	b.n	80033ea <HAL_RCC_OscConfig+0x36e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x334>
 8003396:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a75      	ldr	r2, [pc, #468]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6213      	str	r3, [r2, #32]
 80033a2:	4b73      	ldr	r3, [pc, #460]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4a72      	ldr	r2, [pc, #456]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	6213      	str	r3, [r2, #32]
 80033ae:	e01c      	b.n	80033ea <HAL_RCC_OscConfig+0x36e>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	d10c      	bne.n	80033d2 <HAL_RCC_OscConfig+0x356>
 80033b8:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4a6c      	ldr	r2, [pc, #432]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033be:	f043 0304 	orr.w	r3, r3, #4
 80033c2:	6213      	str	r3, [r2, #32]
 80033c4:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4a69      	ldr	r2, [pc, #420]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6213      	str	r3, [r2, #32]
 80033d0:	e00b      	b.n	80033ea <HAL_RCC_OscConfig+0x36e>
 80033d2:	4b67      	ldr	r3, [pc, #412]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4a66      	ldr	r2, [pc, #408]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	6213      	str	r3, [r2, #32]
 80033de:	4b64      	ldr	r3, [pc, #400]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4a63      	ldr	r2, [pc, #396]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80033e4:	f023 0304 	bic.w	r3, r3, #4
 80033e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d015      	beq.n	800341e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f2:	f7fe fb0d 	bl	8001a10 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	e00a      	b.n	8003410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fa:	f7fe fb09 	bl	8001a10 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f241 3288 	movw	r2, #5000	; 0x1388
 8003408:	4293      	cmp	r3, r2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e0ab      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003410:	4b57      	ldr	r3, [pc, #348]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0ee      	beq.n	80033fa <HAL_RCC_OscConfig+0x37e>
 800341c:	e014      	b.n	8003448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341e:	f7fe faf7 	bl	8001a10 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fe faf3 	bl	8001a10 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	; 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e095      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343c:	4b4c      	ldr	r3, [pc, #304]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ee      	bne.n	8003426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d105      	bne.n	800345a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344e:	4b48      	ldr	r3, [pc, #288]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4a47      	ldr	r2, [pc, #284]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 8081 	beq.w	8003566 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003464:	4b42      	ldr	r3, [pc, #264]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d061      	beq.n	8003534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d146      	bne.n	8003506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003478:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <HAL_RCC_OscConfig+0x4fc>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347e:	f7fe fac7 	bl	8001a10 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003486:	f7fe fac3 	bl	8001a10 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e067      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003498:	4b35      	ldr	r3, [pc, #212]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f0      	bne.n	8003486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d108      	bne.n	80034c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034ae:	4b30      	ldr	r3, [pc, #192]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	492d      	ldr	r1, [pc, #180]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c0:	4b2b      	ldr	r3, [pc, #172]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a19      	ldr	r1, [r3, #32]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	430b      	orrs	r3, r1
 80034d2:	4927      	ldr	r1, [pc, #156]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d8:	4b27      	ldr	r3, [pc, #156]	; (8003578 <HAL_RCC_OscConfig+0x4fc>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fa97 	bl	8001a10 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fe fa93 	bl	8001a10 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e037      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f8:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x46a>
 8003504:	e02f      	b.n	8003566 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <HAL_RCC_OscConfig+0x4fc>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe fa80 	bl	8001a10 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe fa7c 	bl	8001a10 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e020      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x498>
 8003532:	e018      	b.n	8003566 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e013      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_OscConfig+0x4f4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	429a      	cmp	r2, r3
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d001      	beq.n	8003566 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
 8003578:	42420060 	.word	0x42420060

0800357c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0d0      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003590:	4b6a      	ldr	r3, [pc, #424]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d910      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b67      	ldr	r3, [pc, #412]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 0207 	bic.w	r2, r3, #7
 80035a6:	4965      	ldr	r1, [pc, #404]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b63      	ldr	r3, [pc, #396]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0b8      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d020      	beq.n	800360e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d8:	4b59      	ldr	r3, [pc, #356]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a58      	ldr	r2, [pc, #352]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f0:	4b53      	ldr	r3, [pc, #332]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4a52      	ldr	r2, [pc, #328]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4b50      	ldr	r3, [pc, #320]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	494d      	ldr	r1, [pc, #308]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d040      	beq.n	800369c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b47      	ldr	r3, [pc, #284]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d115      	bne.n	800365a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e07f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363a:	4b41      	ldr	r3, [pc, #260]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e073      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364a:	4b3d      	ldr	r3, [pc, #244]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06b      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365a:	4b39      	ldr	r3, [pc, #228]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4936      	ldr	r1, [pc, #216]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800366c:	f7fe f9d0 	bl	8001a10 <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	e00a      	b.n	800368a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003674:	f7fe f9cc 	bl	8001a10 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e053      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 020c 	and.w	r2, r3, #12
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	429a      	cmp	r2, r3
 800369a:	d1eb      	bne.n	8003674 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d210      	bcs.n	80036cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 0207 	bic.w	r2, r3, #7
 80036b2:	4922      	ldr	r1, [pc, #136]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b20      	ldr	r3, [pc, #128]	; (800373c <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e032      	b.n	8003732 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4916      	ldr	r1, [pc, #88]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	490e      	ldr	r1, [pc, #56]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	4313      	orrs	r3, r2
 8003708:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800370a:	f000 f821 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800370e:	4602      	mov	r2, r0
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	490a      	ldr	r1, [pc, #40]	; (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 800371c:	5ccb      	ldrb	r3, [r1, r3]
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1cc>)
 8003724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_RCC_ClockConfig+0x1d0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe f92e 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40022000 	.word	0x40022000
 8003740:	40021000 	.word	0x40021000
 8003744:	080049d8 	.word	0x080049d8
 8003748:	20000000 	.word	0x20000000
 800374c:	20000004 	.word	0x20000004

08003750 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003750:	b490      	push	{r4, r7}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003756:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003758:	1d3c      	adds	r4, r7, #4
 800375a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800375c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003760:	f240 2301 	movw	r3, #513	; 0x201
 8003764:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800377a:	4b22      	ldr	r3, [pc, #136]	; (8003804 <HAL_RCC_GetSysClockFreq+0xb4>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b04      	cmp	r3, #4
 8003788:	d002      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x40>
 800378a:	2b08      	cmp	r3, #8
 800378c:	d003      	beq.n	8003796 <HAL_RCC_GetSysClockFreq+0x46>
 800378e:	e02d      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003790:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003792:	623b      	str	r3, [r7, #32]
      break;
 8003794:	e02d      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	0c9b      	lsrs	r3, r3, #18
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037a2:	4413      	add	r3, r2
 80037a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037b4:	4b13      	ldr	r3, [pc, #76]	; (8003804 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	0c5b      	lsrs	r3, r3, #17
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037c2:	4413      	add	r3, r2
 80037c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ce:	fb02 f203 	mul.w	r2, r2, r3
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
 80037da:	e004      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	4a0b      	ldr	r2, [pc, #44]	; (800380c <HAL_RCC_GetSysClockFreq+0xbc>)
 80037e0:	fb02 f303 	mul.w	r3, r2, r3
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	623b      	str	r3, [r7, #32]
      break;
 80037ea:	e002      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ee:	623b      	str	r3, [r7, #32]
      break;
 80037f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f2:	6a3b      	ldr	r3, [r7, #32]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3728      	adds	r7, #40	; 0x28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc90      	pop	{r4, r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	080049c8 	.word	0x080049c8
 8003804:	40021000 	.word	0x40021000
 8003808:	007a1200 	.word	0x007a1200
 800380c:	003d0900 	.word	0x003d0900

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b02      	ldr	r3, [pc, #8]	; (8003820 <HAL_RCC_GetHCLKFreq+0x10>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	20000000 	.word	0x20000000

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003828:	f7ff fff2 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	080049e8 	.word	0x080049e8

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003850:	f7ff ffde 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	0adb      	lsrs	r3, r3, #11
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4903      	ldr	r1, [pc, #12]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	080049e8 	.word	0x080049e8

08003874 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <RCC_Delay+0x34>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <RCC_Delay+0x38>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0a5b      	lsrs	r3, r3, #9
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003890:	bf00      	nop
  }
  while (Delay --);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1e5a      	subs	r2, r3, #1
 8003896:	60fa      	str	r2, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f9      	bne.n	8003890 <RCC_Delay+0x1c>
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	20000000 	.word	0x20000000
 80038ac:	10624dd3 	.word	0x10624dd3

080038b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e03f      	b.n	8003942 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd ff2c 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	; 0x24
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f9a7 	bl	8003c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b08a      	sub	sp, #40	; 0x28
 800394e:	af02      	add	r7, sp, #8
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b20      	cmp	r3, #32
 8003968:	d17c      	bne.n	8003a64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_UART_Transmit+0x2c>
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e075      	b.n	8003a66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_UART_Transmit+0x3e>
 8003984:	2302      	movs	r3, #2
 8003986:	e06e      	b.n	8003a66 <HAL_UART_Transmit+0x11c>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2221      	movs	r2, #33	; 0x21
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800399e:	f7fe f837 	bl	8001a10 <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d108      	bne.n	80039cc <HAL_UART_Transmit+0x82>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d104      	bne.n	80039cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	e003      	b.n	80039d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039dc:	e02a      	b.n	8003a34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	2180      	movs	r1, #128	; 0x80
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f8e2 	bl	8003bb2 <UART_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e036      	b.n	8003a66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10b      	bne.n	8003a16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	3302      	adds	r3, #2
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	e007      	b.n	8003a26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	781a      	ldrb	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	3301      	adds	r3, #1
 8003a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1cf      	bne.n	80039de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2200      	movs	r2, #0
 8003a46:	2140      	movs	r1, #64	; 0x40
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f8b2 	bl	8003bb2 <UART_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e006      	b.n	8003a66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e000      	b.n	8003a66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
  }
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b08a      	sub	sp, #40	; 0x28
 8003a72:	af02      	add	r7, sp, #8
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	f040 808c 	bne.w	8003ba8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_UART_Receive+0x2e>
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e084      	b.n	8003baa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Receive+0x40>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e07d      	b.n	8003baa <HAL_UART_Receive+0x13c>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2222      	movs	r2, #34	; 0x22
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aca:	f7fd ffa1 	bl	8001a10 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	88fa      	ldrh	r2, [r7, #6]
 8003ada:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae4:	d108      	bne.n	8003af8 <HAL_UART_Receive+0x8a>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	e003      	b.n	8003b00 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b08:	e043      	b.n	8003b92 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2120      	movs	r1, #32
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f84c 	bl	8003bb2 <UART_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e042      	b.n	8003baa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10c      	bne.n	8003b44 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	3302      	adds	r3, #2
 8003b40:	61bb      	str	r3, [r7, #24]
 8003b42:	e01f      	b.n	8003b84 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4c:	d007      	beq.n	8003b5e <HAL_UART_Receive+0xf0>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <HAL_UART_Receive+0xfe>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	e008      	b.n	8003b7e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	3301      	adds	r3, #1
 8003b82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1b6      	bne.n	8003b0a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc2:	e02c      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bca:	d028      	beq.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bd2:	f7fd ff1d 	bl	8001a10 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d21d      	bcs.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bf0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0201 	bic.w	r2, r2, #1
 8003c00:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e00f      	b.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4013      	ands	r3, r2
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	bf0c      	ite	eq
 8003c2e:	2301      	moveq	r3, #1
 8003c30:	2300      	movne	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d0c3      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c82:	f023 030c 	bic.w	r3, r3, #12
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <UART_SetConfig+0x114>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d103      	bne.n	8003cb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cb0:	f7ff fdcc 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	e002      	b.n	8003cbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cb8:	f7ff fdb4 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009a      	lsls	r2, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	4a22      	ldr	r2, [pc, #136]	; (8003d60 <UART_SetConfig+0x118>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	0119      	lsls	r1, r3, #4
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009a      	lsls	r2, r3, #2
 8003ce8:	441a      	add	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf4:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <UART_SetConfig+0x118>)
 8003cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	2064      	movs	r0, #100	; 0x64
 8003cfe:	fb00 f303 	mul.w	r3, r0, r3
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	3332      	adds	r3, #50	; 0x32
 8003d08:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <UART_SetConfig+0x118>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d14:	4419      	add	r1, r3
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009a      	lsls	r2, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <UART_SetConfig+0x118>)
 8003d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2064      	movs	r0, #100	; 0x64
 8003d36:	fb00 f303 	mul.w	r3, r0, r3
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	3332      	adds	r3, #50	; 0x32
 8003d40:	4a07      	ldr	r2, [pc, #28]	; (8003d60 <UART_SetConfig+0x118>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	f003 020f 	and.w	r2, r3, #15
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	440a      	add	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40013800 	.word	0x40013800
 8003d60:	51eb851f 	.word	0x51eb851f

08003d64 <atoi>:
 8003d64:	220a      	movs	r2, #10
 8003d66:	2100      	movs	r1, #0
 8003d68:	f000 b8d8 	b.w	8003f1c <strtol>

08003d6c <__errno>:
 8003d6c:	4b01      	ldr	r3, [pc, #4]	; (8003d74 <__errno+0x8>)
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	2000000c 	.word	0x2000000c

08003d78 <__libc_init_array>:
 8003d78:	b570      	push	{r4, r5, r6, lr}
 8003d7a:	2600      	movs	r6, #0
 8003d7c:	4d0c      	ldr	r5, [pc, #48]	; (8003db0 <__libc_init_array+0x38>)
 8003d7e:	4c0d      	ldr	r4, [pc, #52]	; (8003db4 <__libc_init_array+0x3c>)
 8003d80:	1b64      	subs	r4, r4, r5
 8003d82:	10a4      	asrs	r4, r4, #2
 8003d84:	42a6      	cmp	r6, r4
 8003d86:	d109      	bne.n	8003d9c <__libc_init_array+0x24>
 8003d88:	f000 fd6e 	bl	8004868 <_init>
 8003d8c:	2600      	movs	r6, #0
 8003d8e:	4d0a      	ldr	r5, [pc, #40]	; (8003db8 <__libc_init_array+0x40>)
 8003d90:	4c0a      	ldr	r4, [pc, #40]	; (8003dbc <__libc_init_array+0x44>)
 8003d92:	1b64      	subs	r4, r4, r5
 8003d94:	10a4      	asrs	r4, r4, #2
 8003d96:	42a6      	cmp	r6, r4
 8003d98:	d105      	bne.n	8003da6 <__libc_init_array+0x2e>
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
 8003d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da0:	4798      	blx	r3
 8003da2:	3601      	adds	r6, #1
 8003da4:	e7ee      	b.n	8003d84 <__libc_init_array+0xc>
 8003da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003daa:	4798      	blx	r3
 8003dac:	3601      	adds	r6, #1
 8003dae:	e7f2      	b.n	8003d96 <__libc_init_array+0x1e>
 8003db0:	08004b24 	.word	0x08004b24
 8003db4:	08004b24 	.word	0x08004b24
 8003db8:	08004b24 	.word	0x08004b24
 8003dbc:	08004b28 	.word	0x08004b28

08003dc0 <memset>:
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4402      	add	r2, r0
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d100      	bne.n	8003dca <memset+0xa>
 8003dc8:	4770      	bx	lr
 8003dca:	f803 1b01 	strb.w	r1, [r3], #1
 8003dce:	e7f9      	b.n	8003dc4 <memset+0x4>

08003dd0 <siprintf>:
 8003dd0:	b40e      	push	{r1, r2, r3}
 8003dd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dd6:	b500      	push	{lr}
 8003dd8:	b09c      	sub	sp, #112	; 0x70
 8003dda:	ab1d      	add	r3, sp, #116	; 0x74
 8003ddc:	9002      	str	r0, [sp, #8]
 8003dde:	9006      	str	r0, [sp, #24]
 8003de0:	9107      	str	r1, [sp, #28]
 8003de2:	9104      	str	r1, [sp, #16]
 8003de4:	4808      	ldr	r0, [pc, #32]	; (8003e08 <siprintf+0x38>)
 8003de6:	4909      	ldr	r1, [pc, #36]	; (8003e0c <siprintf+0x3c>)
 8003de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dec:	9105      	str	r1, [sp, #20]
 8003dee:	6800      	ldr	r0, [r0, #0]
 8003df0:	a902      	add	r1, sp, #8
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	f000 f8f8 	bl	8003fe8 <_svfiprintf_r>
 8003df8:	2200      	movs	r2, #0
 8003dfa:	9b02      	ldr	r3, [sp, #8]
 8003dfc:	701a      	strb	r2, [r3, #0]
 8003dfe:	b01c      	add	sp, #112	; 0x70
 8003e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e04:	b003      	add	sp, #12
 8003e06:	4770      	bx	lr
 8003e08:	2000000c 	.word	0x2000000c
 8003e0c:	ffff0208 	.word	0xffff0208

08003e10 <_strtol_l.isra.0>:
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e16:	4686      	mov	lr, r0
 8003e18:	d001      	beq.n	8003e1e <_strtol_l.isra.0+0xe>
 8003e1a:	2b24      	cmp	r3, #36	; 0x24
 8003e1c:	d906      	bls.n	8003e2c <_strtol_l.isra.0+0x1c>
 8003e1e:	f7ff ffa5 	bl	8003d6c <__errno>
 8003e22:	2316      	movs	r3, #22
 8003e24:	6003      	str	r3, [r0, #0]
 8003e26:	2000      	movs	r0, #0
 8003e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e2c:	468c      	mov	ip, r1
 8003e2e:	4e3a      	ldr	r6, [pc, #232]	; (8003f18 <_strtol_l.isra.0+0x108>)
 8003e30:	4660      	mov	r0, ip
 8003e32:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003e36:	5da5      	ldrb	r5, [r4, r6]
 8003e38:	f015 0508 	ands.w	r5, r5, #8
 8003e3c:	d1f8      	bne.n	8003e30 <_strtol_l.isra.0+0x20>
 8003e3e:	2c2d      	cmp	r4, #45	; 0x2d
 8003e40:	d133      	bne.n	8003eaa <_strtol_l.isra.0+0x9a>
 8003e42:	f04f 0801 	mov.w	r8, #1
 8003e46:	f89c 4000 	ldrb.w	r4, [ip]
 8003e4a:	f100 0c02 	add.w	ip, r0, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d05d      	beq.n	8003f0e <_strtol_l.isra.0+0xfe>
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d10c      	bne.n	8003e70 <_strtol_l.isra.0+0x60>
 8003e56:	2c30      	cmp	r4, #48	; 0x30
 8003e58:	d10a      	bne.n	8003e70 <_strtol_l.isra.0+0x60>
 8003e5a:	f89c 0000 	ldrb.w	r0, [ip]
 8003e5e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003e62:	2858      	cmp	r0, #88	; 0x58
 8003e64:	d14e      	bne.n	8003f04 <_strtol_l.isra.0+0xf4>
 8003e66:	2310      	movs	r3, #16
 8003e68:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003e6c:	f10c 0c02 	add.w	ip, ip, #2
 8003e70:	2500      	movs	r5, #0
 8003e72:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8003e76:	3f01      	subs	r7, #1
 8003e78:	fbb7 f9f3 	udiv	r9, r7, r3
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	fb03 7a19 	mls	sl, r3, r9, r7
 8003e82:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8003e86:	2e09      	cmp	r6, #9
 8003e88:	d818      	bhi.n	8003ebc <_strtol_l.isra.0+0xac>
 8003e8a:	4634      	mov	r4, r6
 8003e8c:	42a3      	cmp	r3, r4
 8003e8e:	dd24      	ble.n	8003eda <_strtol_l.isra.0+0xca>
 8003e90:	2d00      	cmp	r5, #0
 8003e92:	db1f      	blt.n	8003ed4 <_strtol_l.isra.0+0xc4>
 8003e94:	4581      	cmp	r9, r0
 8003e96:	d31d      	bcc.n	8003ed4 <_strtol_l.isra.0+0xc4>
 8003e98:	d101      	bne.n	8003e9e <_strtol_l.isra.0+0x8e>
 8003e9a:	45a2      	cmp	sl, r4
 8003e9c:	db1a      	blt.n	8003ed4 <_strtol_l.isra.0+0xc4>
 8003e9e:	2501      	movs	r5, #1
 8003ea0:	fb00 4003 	mla	r0, r0, r3, r4
 8003ea4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003ea8:	e7eb      	b.n	8003e82 <_strtol_l.isra.0+0x72>
 8003eaa:	2c2b      	cmp	r4, #43	; 0x2b
 8003eac:	bf08      	it	eq
 8003eae:	f89c 4000 	ldrbeq.w	r4, [ip]
 8003eb2:	46a8      	mov	r8, r5
 8003eb4:	bf08      	it	eq
 8003eb6:	f100 0c02 	addeq.w	ip, r0, #2
 8003eba:	e7c8      	b.n	8003e4e <_strtol_l.isra.0+0x3e>
 8003ebc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003ec0:	2e19      	cmp	r6, #25
 8003ec2:	d801      	bhi.n	8003ec8 <_strtol_l.isra.0+0xb8>
 8003ec4:	3c37      	subs	r4, #55	; 0x37
 8003ec6:	e7e1      	b.n	8003e8c <_strtol_l.isra.0+0x7c>
 8003ec8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003ecc:	2e19      	cmp	r6, #25
 8003ece:	d804      	bhi.n	8003eda <_strtol_l.isra.0+0xca>
 8003ed0:	3c57      	subs	r4, #87	; 0x57
 8003ed2:	e7db      	b.n	8003e8c <_strtol_l.isra.0+0x7c>
 8003ed4:	f04f 35ff 	mov.w	r5, #4294967295
 8003ed8:	e7e4      	b.n	8003ea4 <_strtol_l.isra.0+0x94>
 8003eda:	2d00      	cmp	r5, #0
 8003edc:	da08      	bge.n	8003ef0 <_strtol_l.isra.0+0xe0>
 8003ede:	2322      	movs	r3, #34	; 0x22
 8003ee0:	4638      	mov	r0, r7
 8003ee2:	f8ce 3000 	str.w	r3, [lr]
 8003ee6:	2a00      	cmp	r2, #0
 8003ee8:	d09e      	beq.n	8003e28 <_strtol_l.isra.0+0x18>
 8003eea:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003eee:	e007      	b.n	8003f00 <_strtol_l.isra.0+0xf0>
 8003ef0:	f1b8 0f00 	cmp.w	r8, #0
 8003ef4:	d000      	beq.n	8003ef8 <_strtol_l.isra.0+0xe8>
 8003ef6:	4240      	negs	r0, r0
 8003ef8:	2a00      	cmp	r2, #0
 8003efa:	d095      	beq.n	8003e28 <_strtol_l.isra.0+0x18>
 8003efc:	2d00      	cmp	r5, #0
 8003efe:	d1f4      	bne.n	8003eea <_strtol_l.isra.0+0xda>
 8003f00:	6011      	str	r1, [r2, #0]
 8003f02:	e791      	b.n	8003e28 <_strtol_l.isra.0+0x18>
 8003f04:	2430      	movs	r4, #48	; 0x30
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1b2      	bne.n	8003e70 <_strtol_l.isra.0+0x60>
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	e7b0      	b.n	8003e70 <_strtol_l.isra.0+0x60>
 8003f0e:	2c30      	cmp	r4, #48	; 0x30
 8003f10:	d0a3      	beq.n	8003e5a <_strtol_l.isra.0+0x4a>
 8003f12:	230a      	movs	r3, #10
 8003f14:	e7ac      	b.n	8003e70 <_strtol_l.isra.0+0x60>
 8003f16:	bf00      	nop
 8003f18:	080049f1 	.word	0x080049f1

08003f1c <strtol>:
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	460a      	mov	r2, r1
 8003f20:	4601      	mov	r1, r0
 8003f22:	4802      	ldr	r0, [pc, #8]	; (8003f2c <strtol+0x10>)
 8003f24:	6800      	ldr	r0, [r0, #0]
 8003f26:	f7ff bf73 	b.w	8003e10 <_strtol_l.isra.0>
 8003f2a:	bf00      	nop
 8003f2c:	2000000c 	.word	0x2000000c

08003f30 <__ssputs_r>:
 8003f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	688e      	ldr	r6, [r1, #8]
 8003f36:	4682      	mov	sl, r0
 8003f38:	429e      	cmp	r6, r3
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	4690      	mov	r8, r2
 8003f3e:	461f      	mov	r7, r3
 8003f40:	d838      	bhi.n	8003fb4 <__ssputs_r+0x84>
 8003f42:	898a      	ldrh	r2, [r1, #12]
 8003f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f48:	d032      	beq.n	8003fb0 <__ssputs_r+0x80>
 8003f4a:	6825      	ldr	r5, [r4, #0]
 8003f4c:	6909      	ldr	r1, [r1, #16]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	eba5 0901 	sub.w	r9, r5, r1
 8003f54:	6965      	ldr	r5, [r4, #20]
 8003f56:	444b      	add	r3, r9
 8003f58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f60:	106d      	asrs	r5, r5, #1
 8003f62:	429d      	cmp	r5, r3
 8003f64:	bf38      	it	cc
 8003f66:	461d      	movcc	r5, r3
 8003f68:	0553      	lsls	r3, r2, #21
 8003f6a:	d531      	bpl.n	8003fd0 <__ssputs_r+0xa0>
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f000 fb53 	bl	8004618 <_malloc_r>
 8003f72:	4606      	mov	r6, r0
 8003f74:	b950      	cbnz	r0, 8003f8c <__ssputs_r+0x5c>
 8003f76:	230c      	movs	r3, #12
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	f8ca 3000 	str.w	r3, [sl]
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f86:	81a3      	strh	r3, [r4, #12]
 8003f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f8c:	464a      	mov	r2, r9
 8003f8e:	6921      	ldr	r1, [r4, #16]
 8003f90:	f000 face 	bl	8004530 <memcpy>
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	6126      	str	r6, [r4, #16]
 8003fa2:	444e      	add	r6, r9
 8003fa4:	6026      	str	r6, [r4, #0]
 8003fa6:	463e      	mov	r6, r7
 8003fa8:	6165      	str	r5, [r4, #20]
 8003faa:	eba5 0509 	sub.w	r5, r5, r9
 8003fae:	60a5      	str	r5, [r4, #8]
 8003fb0:	42be      	cmp	r6, r7
 8003fb2:	d900      	bls.n	8003fb6 <__ssputs_r+0x86>
 8003fb4:	463e      	mov	r6, r7
 8003fb6:	4632      	mov	r2, r6
 8003fb8:	4641      	mov	r1, r8
 8003fba:	6820      	ldr	r0, [r4, #0]
 8003fbc:	f000 fac6 	bl	800454c <memmove>
 8003fc0:	68a3      	ldr	r3, [r4, #8]
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	1b9b      	subs	r3, r3, r6
 8003fc6:	4432      	add	r2, r6
 8003fc8:	2000      	movs	r0, #0
 8003fca:	60a3      	str	r3, [r4, #8]
 8003fcc:	6022      	str	r2, [r4, #0]
 8003fce:	e7db      	b.n	8003f88 <__ssputs_r+0x58>
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	f000 fb7b 	bl	80046cc <_realloc_r>
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d1e1      	bne.n	8003fa0 <__ssputs_r+0x70>
 8003fdc:	4650      	mov	r0, sl
 8003fde:	6921      	ldr	r1, [r4, #16]
 8003fe0:	f000 face 	bl	8004580 <_free_r>
 8003fe4:	e7c7      	b.n	8003f76 <__ssputs_r+0x46>
	...

08003fe8 <_svfiprintf_r>:
 8003fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fec:	4698      	mov	r8, r3
 8003fee:	898b      	ldrh	r3, [r1, #12]
 8003ff0:	4607      	mov	r7, r0
 8003ff2:	061b      	lsls	r3, r3, #24
 8003ff4:	460d      	mov	r5, r1
 8003ff6:	4614      	mov	r4, r2
 8003ff8:	b09d      	sub	sp, #116	; 0x74
 8003ffa:	d50e      	bpl.n	800401a <_svfiprintf_r+0x32>
 8003ffc:	690b      	ldr	r3, [r1, #16]
 8003ffe:	b963      	cbnz	r3, 800401a <_svfiprintf_r+0x32>
 8004000:	2140      	movs	r1, #64	; 0x40
 8004002:	f000 fb09 	bl	8004618 <_malloc_r>
 8004006:	6028      	str	r0, [r5, #0]
 8004008:	6128      	str	r0, [r5, #16]
 800400a:	b920      	cbnz	r0, 8004016 <_svfiprintf_r+0x2e>
 800400c:	230c      	movs	r3, #12
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	e0d1      	b.n	80041ba <_svfiprintf_r+0x1d2>
 8004016:	2340      	movs	r3, #64	; 0x40
 8004018:	616b      	str	r3, [r5, #20]
 800401a:	2300      	movs	r3, #0
 800401c:	9309      	str	r3, [sp, #36]	; 0x24
 800401e:	2320      	movs	r3, #32
 8004020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004024:	2330      	movs	r3, #48	; 0x30
 8004026:	f04f 0901 	mov.w	r9, #1
 800402a:	f8cd 800c 	str.w	r8, [sp, #12]
 800402e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80041d4 <_svfiprintf_r+0x1ec>
 8004032:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004036:	4623      	mov	r3, r4
 8004038:	469a      	mov	sl, r3
 800403a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800403e:	b10a      	cbz	r2, 8004044 <_svfiprintf_r+0x5c>
 8004040:	2a25      	cmp	r2, #37	; 0x25
 8004042:	d1f9      	bne.n	8004038 <_svfiprintf_r+0x50>
 8004044:	ebba 0b04 	subs.w	fp, sl, r4
 8004048:	d00b      	beq.n	8004062 <_svfiprintf_r+0x7a>
 800404a:	465b      	mov	r3, fp
 800404c:	4622      	mov	r2, r4
 800404e:	4629      	mov	r1, r5
 8004050:	4638      	mov	r0, r7
 8004052:	f7ff ff6d 	bl	8003f30 <__ssputs_r>
 8004056:	3001      	adds	r0, #1
 8004058:	f000 80aa 	beq.w	80041b0 <_svfiprintf_r+0x1c8>
 800405c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800405e:	445a      	add	r2, fp
 8004060:	9209      	str	r2, [sp, #36]	; 0x24
 8004062:	f89a 3000 	ldrb.w	r3, [sl]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80a2 	beq.w	80041b0 <_svfiprintf_r+0x1c8>
 800406c:	2300      	movs	r3, #0
 800406e:	f04f 32ff 	mov.w	r2, #4294967295
 8004072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004076:	f10a 0a01 	add.w	sl, sl, #1
 800407a:	9304      	str	r3, [sp, #16]
 800407c:	9307      	str	r3, [sp, #28]
 800407e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004082:	931a      	str	r3, [sp, #104]	; 0x68
 8004084:	4654      	mov	r4, sl
 8004086:	2205      	movs	r2, #5
 8004088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800408c:	4851      	ldr	r0, [pc, #324]	; (80041d4 <_svfiprintf_r+0x1ec>)
 800408e:	f000 fa41 	bl	8004514 <memchr>
 8004092:	9a04      	ldr	r2, [sp, #16]
 8004094:	b9d8      	cbnz	r0, 80040ce <_svfiprintf_r+0xe6>
 8004096:	06d0      	lsls	r0, r2, #27
 8004098:	bf44      	itt	mi
 800409a:	2320      	movmi	r3, #32
 800409c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040a0:	0711      	lsls	r1, r2, #28
 80040a2:	bf44      	itt	mi
 80040a4:	232b      	movmi	r3, #43	; 0x2b
 80040a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040aa:	f89a 3000 	ldrb.w	r3, [sl]
 80040ae:	2b2a      	cmp	r3, #42	; 0x2a
 80040b0:	d015      	beq.n	80040de <_svfiprintf_r+0xf6>
 80040b2:	4654      	mov	r4, sl
 80040b4:	2000      	movs	r0, #0
 80040b6:	f04f 0c0a 	mov.w	ip, #10
 80040ba:	9a07      	ldr	r2, [sp, #28]
 80040bc:	4621      	mov	r1, r4
 80040be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040c2:	3b30      	subs	r3, #48	; 0x30
 80040c4:	2b09      	cmp	r3, #9
 80040c6:	d94e      	bls.n	8004166 <_svfiprintf_r+0x17e>
 80040c8:	b1b0      	cbz	r0, 80040f8 <_svfiprintf_r+0x110>
 80040ca:	9207      	str	r2, [sp, #28]
 80040cc:	e014      	b.n	80040f8 <_svfiprintf_r+0x110>
 80040ce:	eba0 0308 	sub.w	r3, r0, r8
 80040d2:	fa09 f303 	lsl.w	r3, r9, r3
 80040d6:	4313      	orrs	r3, r2
 80040d8:	46a2      	mov	sl, r4
 80040da:	9304      	str	r3, [sp, #16]
 80040dc:	e7d2      	b.n	8004084 <_svfiprintf_r+0x9c>
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	1d19      	adds	r1, r3, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	9103      	str	r1, [sp, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bfbb      	ittet	lt
 80040ea:	425b      	neglt	r3, r3
 80040ec:	f042 0202 	orrlt.w	r2, r2, #2
 80040f0:	9307      	strge	r3, [sp, #28]
 80040f2:	9307      	strlt	r3, [sp, #28]
 80040f4:	bfb8      	it	lt
 80040f6:	9204      	strlt	r2, [sp, #16]
 80040f8:	7823      	ldrb	r3, [r4, #0]
 80040fa:	2b2e      	cmp	r3, #46	; 0x2e
 80040fc:	d10c      	bne.n	8004118 <_svfiprintf_r+0x130>
 80040fe:	7863      	ldrb	r3, [r4, #1]
 8004100:	2b2a      	cmp	r3, #42	; 0x2a
 8004102:	d135      	bne.n	8004170 <_svfiprintf_r+0x188>
 8004104:	9b03      	ldr	r3, [sp, #12]
 8004106:	3402      	adds	r4, #2
 8004108:	1d1a      	adds	r2, r3, #4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	9203      	str	r2, [sp, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	bfb8      	it	lt
 8004112:	f04f 33ff 	movlt.w	r3, #4294967295
 8004116:	9305      	str	r3, [sp, #20]
 8004118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041e4 <_svfiprintf_r+0x1fc>
 800411c:	2203      	movs	r2, #3
 800411e:	4650      	mov	r0, sl
 8004120:	7821      	ldrb	r1, [r4, #0]
 8004122:	f000 f9f7 	bl	8004514 <memchr>
 8004126:	b140      	cbz	r0, 800413a <_svfiprintf_r+0x152>
 8004128:	2340      	movs	r3, #64	; 0x40
 800412a:	eba0 000a 	sub.w	r0, r0, sl
 800412e:	fa03 f000 	lsl.w	r0, r3, r0
 8004132:	9b04      	ldr	r3, [sp, #16]
 8004134:	3401      	adds	r4, #1
 8004136:	4303      	orrs	r3, r0
 8004138:	9304      	str	r3, [sp, #16]
 800413a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800413e:	2206      	movs	r2, #6
 8004140:	4825      	ldr	r0, [pc, #148]	; (80041d8 <_svfiprintf_r+0x1f0>)
 8004142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004146:	f000 f9e5 	bl	8004514 <memchr>
 800414a:	2800      	cmp	r0, #0
 800414c:	d038      	beq.n	80041c0 <_svfiprintf_r+0x1d8>
 800414e:	4b23      	ldr	r3, [pc, #140]	; (80041dc <_svfiprintf_r+0x1f4>)
 8004150:	bb1b      	cbnz	r3, 800419a <_svfiprintf_r+0x1b2>
 8004152:	9b03      	ldr	r3, [sp, #12]
 8004154:	3307      	adds	r3, #7
 8004156:	f023 0307 	bic.w	r3, r3, #7
 800415a:	3308      	adds	r3, #8
 800415c:	9303      	str	r3, [sp, #12]
 800415e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004160:	4433      	add	r3, r6
 8004162:	9309      	str	r3, [sp, #36]	; 0x24
 8004164:	e767      	b.n	8004036 <_svfiprintf_r+0x4e>
 8004166:	460c      	mov	r4, r1
 8004168:	2001      	movs	r0, #1
 800416a:	fb0c 3202 	mla	r2, ip, r2, r3
 800416e:	e7a5      	b.n	80040bc <_svfiprintf_r+0xd4>
 8004170:	2300      	movs	r3, #0
 8004172:	f04f 0c0a 	mov.w	ip, #10
 8004176:	4619      	mov	r1, r3
 8004178:	3401      	adds	r4, #1
 800417a:	9305      	str	r3, [sp, #20]
 800417c:	4620      	mov	r0, r4
 800417e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004182:	3a30      	subs	r2, #48	; 0x30
 8004184:	2a09      	cmp	r2, #9
 8004186:	d903      	bls.n	8004190 <_svfiprintf_r+0x1a8>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0c5      	beq.n	8004118 <_svfiprintf_r+0x130>
 800418c:	9105      	str	r1, [sp, #20]
 800418e:	e7c3      	b.n	8004118 <_svfiprintf_r+0x130>
 8004190:	4604      	mov	r4, r0
 8004192:	2301      	movs	r3, #1
 8004194:	fb0c 2101 	mla	r1, ip, r1, r2
 8004198:	e7f0      	b.n	800417c <_svfiprintf_r+0x194>
 800419a:	ab03      	add	r3, sp, #12
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	462a      	mov	r2, r5
 80041a0:	4638      	mov	r0, r7
 80041a2:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <_svfiprintf_r+0x1f8>)
 80041a4:	a904      	add	r1, sp, #16
 80041a6:	f3af 8000 	nop.w
 80041aa:	1c42      	adds	r2, r0, #1
 80041ac:	4606      	mov	r6, r0
 80041ae:	d1d6      	bne.n	800415e <_svfiprintf_r+0x176>
 80041b0:	89ab      	ldrh	r3, [r5, #12]
 80041b2:	065b      	lsls	r3, r3, #25
 80041b4:	f53f af2c 	bmi.w	8004010 <_svfiprintf_r+0x28>
 80041b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ba:	b01d      	add	sp, #116	; 0x74
 80041bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c0:	ab03      	add	r3, sp, #12
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	462a      	mov	r2, r5
 80041c6:	4638      	mov	r0, r7
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <_svfiprintf_r+0x1f8>)
 80041ca:	a904      	add	r1, sp, #16
 80041cc:	f000 f87c 	bl	80042c8 <_printf_i>
 80041d0:	e7eb      	b.n	80041aa <_svfiprintf_r+0x1c2>
 80041d2:	bf00      	nop
 80041d4:	08004af1 	.word	0x08004af1
 80041d8:	08004afb 	.word	0x08004afb
 80041dc:	00000000 	.word	0x00000000
 80041e0:	08003f31 	.word	0x08003f31
 80041e4:	08004af7 	.word	0x08004af7

080041e8 <_printf_common>:
 80041e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ec:	4616      	mov	r6, r2
 80041ee:	4699      	mov	r9, r3
 80041f0:	688a      	ldr	r2, [r1, #8]
 80041f2:	690b      	ldr	r3, [r1, #16]
 80041f4:	4607      	mov	r7, r0
 80041f6:	4293      	cmp	r3, r2
 80041f8:	bfb8      	it	lt
 80041fa:	4613      	movlt	r3, r2
 80041fc:	6033      	str	r3, [r6, #0]
 80041fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004202:	460c      	mov	r4, r1
 8004204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004208:	b10a      	cbz	r2, 800420e <_printf_common+0x26>
 800420a:	3301      	adds	r3, #1
 800420c:	6033      	str	r3, [r6, #0]
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	0699      	lsls	r1, r3, #26
 8004212:	bf42      	ittt	mi
 8004214:	6833      	ldrmi	r3, [r6, #0]
 8004216:	3302      	addmi	r3, #2
 8004218:	6033      	strmi	r3, [r6, #0]
 800421a:	6825      	ldr	r5, [r4, #0]
 800421c:	f015 0506 	ands.w	r5, r5, #6
 8004220:	d106      	bne.n	8004230 <_printf_common+0x48>
 8004222:	f104 0a19 	add.w	sl, r4, #25
 8004226:	68e3      	ldr	r3, [r4, #12]
 8004228:	6832      	ldr	r2, [r6, #0]
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	42ab      	cmp	r3, r5
 800422e:	dc28      	bgt.n	8004282 <_printf_common+0x9a>
 8004230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004234:	1e13      	subs	r3, r2, #0
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	bf18      	it	ne
 800423a:	2301      	movne	r3, #1
 800423c:	0692      	lsls	r2, r2, #26
 800423e:	d42d      	bmi.n	800429c <_printf_common+0xb4>
 8004240:	4649      	mov	r1, r9
 8004242:	4638      	mov	r0, r7
 8004244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004248:	47c0      	blx	r8
 800424a:	3001      	adds	r0, #1
 800424c:	d020      	beq.n	8004290 <_printf_common+0xa8>
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	68e5      	ldr	r5, [r4, #12]
 8004252:	f003 0306 	and.w	r3, r3, #6
 8004256:	2b04      	cmp	r3, #4
 8004258:	bf18      	it	ne
 800425a:	2500      	movne	r5, #0
 800425c:	6832      	ldr	r2, [r6, #0]
 800425e:	f04f 0600 	mov.w	r6, #0
 8004262:	68a3      	ldr	r3, [r4, #8]
 8004264:	bf08      	it	eq
 8004266:	1aad      	subeq	r5, r5, r2
 8004268:	6922      	ldr	r2, [r4, #16]
 800426a:	bf08      	it	eq
 800426c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004270:	4293      	cmp	r3, r2
 8004272:	bfc4      	itt	gt
 8004274:	1a9b      	subgt	r3, r3, r2
 8004276:	18ed      	addgt	r5, r5, r3
 8004278:	341a      	adds	r4, #26
 800427a:	42b5      	cmp	r5, r6
 800427c:	d11a      	bne.n	80042b4 <_printf_common+0xcc>
 800427e:	2000      	movs	r0, #0
 8004280:	e008      	b.n	8004294 <_printf_common+0xac>
 8004282:	2301      	movs	r3, #1
 8004284:	4652      	mov	r2, sl
 8004286:	4649      	mov	r1, r9
 8004288:	4638      	mov	r0, r7
 800428a:	47c0      	blx	r8
 800428c:	3001      	adds	r0, #1
 800428e:	d103      	bne.n	8004298 <_printf_common+0xb0>
 8004290:	f04f 30ff 	mov.w	r0, #4294967295
 8004294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004298:	3501      	adds	r5, #1
 800429a:	e7c4      	b.n	8004226 <_printf_common+0x3e>
 800429c:	2030      	movs	r0, #48	; 0x30
 800429e:	18e1      	adds	r1, r4, r3
 80042a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042aa:	4422      	add	r2, r4
 80042ac:	3302      	adds	r3, #2
 80042ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042b2:	e7c5      	b.n	8004240 <_printf_common+0x58>
 80042b4:	2301      	movs	r3, #1
 80042b6:	4622      	mov	r2, r4
 80042b8:	4649      	mov	r1, r9
 80042ba:	4638      	mov	r0, r7
 80042bc:	47c0      	blx	r8
 80042be:	3001      	adds	r0, #1
 80042c0:	d0e6      	beq.n	8004290 <_printf_common+0xa8>
 80042c2:	3601      	adds	r6, #1
 80042c4:	e7d9      	b.n	800427a <_printf_common+0x92>
	...

080042c8 <_printf_i>:
 80042c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	460c      	mov	r4, r1
 80042ce:	7e27      	ldrb	r7, [r4, #24]
 80042d0:	4691      	mov	r9, r2
 80042d2:	2f78      	cmp	r7, #120	; 0x78
 80042d4:	4680      	mov	r8, r0
 80042d6:	469a      	mov	sl, r3
 80042d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042de:	d807      	bhi.n	80042f0 <_printf_i+0x28>
 80042e0:	2f62      	cmp	r7, #98	; 0x62
 80042e2:	d80a      	bhi.n	80042fa <_printf_i+0x32>
 80042e4:	2f00      	cmp	r7, #0
 80042e6:	f000 80d9 	beq.w	800449c <_printf_i+0x1d4>
 80042ea:	2f58      	cmp	r7, #88	; 0x58
 80042ec:	f000 80a4 	beq.w	8004438 <_printf_i+0x170>
 80042f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042f8:	e03a      	b.n	8004370 <_printf_i+0xa8>
 80042fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042fe:	2b15      	cmp	r3, #21
 8004300:	d8f6      	bhi.n	80042f0 <_printf_i+0x28>
 8004302:	a001      	add	r0, pc, #4	; (adr r0, 8004308 <_printf_i+0x40>)
 8004304:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004308:	08004361 	.word	0x08004361
 800430c:	08004375 	.word	0x08004375
 8004310:	080042f1 	.word	0x080042f1
 8004314:	080042f1 	.word	0x080042f1
 8004318:	080042f1 	.word	0x080042f1
 800431c:	080042f1 	.word	0x080042f1
 8004320:	08004375 	.word	0x08004375
 8004324:	080042f1 	.word	0x080042f1
 8004328:	080042f1 	.word	0x080042f1
 800432c:	080042f1 	.word	0x080042f1
 8004330:	080042f1 	.word	0x080042f1
 8004334:	08004483 	.word	0x08004483
 8004338:	080043a5 	.word	0x080043a5
 800433c:	08004465 	.word	0x08004465
 8004340:	080042f1 	.word	0x080042f1
 8004344:	080042f1 	.word	0x080042f1
 8004348:	080044a5 	.word	0x080044a5
 800434c:	080042f1 	.word	0x080042f1
 8004350:	080043a5 	.word	0x080043a5
 8004354:	080042f1 	.word	0x080042f1
 8004358:	080042f1 	.word	0x080042f1
 800435c:	0800446d 	.word	0x0800446d
 8004360:	680b      	ldr	r3, [r1, #0]
 8004362:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004366:	1d1a      	adds	r2, r3, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	600a      	str	r2, [r1, #0]
 800436c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004370:	2301      	movs	r3, #1
 8004372:	e0a4      	b.n	80044be <_printf_i+0x1f6>
 8004374:	6825      	ldr	r5, [r4, #0]
 8004376:	6808      	ldr	r0, [r1, #0]
 8004378:	062e      	lsls	r6, r5, #24
 800437a:	f100 0304 	add.w	r3, r0, #4
 800437e:	d50a      	bpl.n	8004396 <_printf_i+0xce>
 8004380:	6805      	ldr	r5, [r0, #0]
 8004382:	600b      	str	r3, [r1, #0]
 8004384:	2d00      	cmp	r5, #0
 8004386:	da03      	bge.n	8004390 <_printf_i+0xc8>
 8004388:	232d      	movs	r3, #45	; 0x2d
 800438a:	426d      	negs	r5, r5
 800438c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004390:	230a      	movs	r3, #10
 8004392:	485e      	ldr	r0, [pc, #376]	; (800450c <_printf_i+0x244>)
 8004394:	e019      	b.n	80043ca <_printf_i+0x102>
 8004396:	f015 0f40 	tst.w	r5, #64	; 0x40
 800439a:	6805      	ldr	r5, [r0, #0]
 800439c:	600b      	str	r3, [r1, #0]
 800439e:	bf18      	it	ne
 80043a0:	b22d      	sxthne	r5, r5
 80043a2:	e7ef      	b.n	8004384 <_printf_i+0xbc>
 80043a4:	680b      	ldr	r3, [r1, #0]
 80043a6:	6825      	ldr	r5, [r4, #0]
 80043a8:	1d18      	adds	r0, r3, #4
 80043aa:	6008      	str	r0, [r1, #0]
 80043ac:	0628      	lsls	r0, r5, #24
 80043ae:	d501      	bpl.n	80043b4 <_printf_i+0xec>
 80043b0:	681d      	ldr	r5, [r3, #0]
 80043b2:	e002      	b.n	80043ba <_printf_i+0xf2>
 80043b4:	0669      	lsls	r1, r5, #25
 80043b6:	d5fb      	bpl.n	80043b0 <_printf_i+0xe8>
 80043b8:	881d      	ldrh	r5, [r3, #0]
 80043ba:	2f6f      	cmp	r7, #111	; 0x6f
 80043bc:	bf0c      	ite	eq
 80043be:	2308      	moveq	r3, #8
 80043c0:	230a      	movne	r3, #10
 80043c2:	4852      	ldr	r0, [pc, #328]	; (800450c <_printf_i+0x244>)
 80043c4:	2100      	movs	r1, #0
 80043c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ca:	6866      	ldr	r6, [r4, #4]
 80043cc:	2e00      	cmp	r6, #0
 80043ce:	bfa8      	it	ge
 80043d0:	6821      	ldrge	r1, [r4, #0]
 80043d2:	60a6      	str	r6, [r4, #8]
 80043d4:	bfa4      	itt	ge
 80043d6:	f021 0104 	bicge.w	r1, r1, #4
 80043da:	6021      	strge	r1, [r4, #0]
 80043dc:	b90d      	cbnz	r5, 80043e2 <_printf_i+0x11a>
 80043de:	2e00      	cmp	r6, #0
 80043e0:	d04d      	beq.n	800447e <_printf_i+0x1b6>
 80043e2:	4616      	mov	r6, r2
 80043e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80043e8:	fb03 5711 	mls	r7, r3, r1, r5
 80043ec:	5dc7      	ldrb	r7, [r0, r7]
 80043ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043f2:	462f      	mov	r7, r5
 80043f4:	42bb      	cmp	r3, r7
 80043f6:	460d      	mov	r5, r1
 80043f8:	d9f4      	bls.n	80043e4 <_printf_i+0x11c>
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d10b      	bne.n	8004416 <_printf_i+0x14e>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	07df      	lsls	r7, r3, #31
 8004402:	d508      	bpl.n	8004416 <_printf_i+0x14e>
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	6861      	ldr	r1, [r4, #4]
 8004408:	4299      	cmp	r1, r3
 800440a:	bfde      	ittt	le
 800440c:	2330      	movle	r3, #48	; 0x30
 800440e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004412:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004416:	1b92      	subs	r2, r2, r6
 8004418:	6122      	str	r2, [r4, #16]
 800441a:	464b      	mov	r3, r9
 800441c:	4621      	mov	r1, r4
 800441e:	4640      	mov	r0, r8
 8004420:	f8cd a000 	str.w	sl, [sp]
 8004424:	aa03      	add	r2, sp, #12
 8004426:	f7ff fedf 	bl	80041e8 <_printf_common>
 800442a:	3001      	adds	r0, #1
 800442c:	d14c      	bne.n	80044c8 <_printf_i+0x200>
 800442e:	f04f 30ff 	mov.w	r0, #4294967295
 8004432:	b004      	add	sp, #16
 8004434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004438:	4834      	ldr	r0, [pc, #208]	; (800450c <_printf_i+0x244>)
 800443a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800443e:	680e      	ldr	r6, [r1, #0]
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	f856 5b04 	ldr.w	r5, [r6], #4
 8004446:	061f      	lsls	r7, r3, #24
 8004448:	600e      	str	r6, [r1, #0]
 800444a:	d514      	bpl.n	8004476 <_printf_i+0x1ae>
 800444c:	07d9      	lsls	r1, r3, #31
 800444e:	bf44      	itt	mi
 8004450:	f043 0320 	orrmi.w	r3, r3, #32
 8004454:	6023      	strmi	r3, [r4, #0]
 8004456:	b91d      	cbnz	r5, 8004460 <_printf_i+0x198>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	f023 0320 	bic.w	r3, r3, #32
 800445e:	6023      	str	r3, [r4, #0]
 8004460:	2310      	movs	r3, #16
 8004462:	e7af      	b.n	80043c4 <_printf_i+0xfc>
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	f043 0320 	orr.w	r3, r3, #32
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	2378      	movs	r3, #120	; 0x78
 800446e:	4828      	ldr	r0, [pc, #160]	; (8004510 <_printf_i+0x248>)
 8004470:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004474:	e7e3      	b.n	800443e <_printf_i+0x176>
 8004476:	065e      	lsls	r6, r3, #25
 8004478:	bf48      	it	mi
 800447a:	b2ad      	uxthmi	r5, r5
 800447c:	e7e6      	b.n	800444c <_printf_i+0x184>
 800447e:	4616      	mov	r6, r2
 8004480:	e7bb      	b.n	80043fa <_printf_i+0x132>
 8004482:	680b      	ldr	r3, [r1, #0]
 8004484:	6826      	ldr	r6, [r4, #0]
 8004486:	1d1d      	adds	r5, r3, #4
 8004488:	6960      	ldr	r0, [r4, #20]
 800448a:	600d      	str	r5, [r1, #0]
 800448c:	0635      	lsls	r5, r6, #24
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	d501      	bpl.n	8004496 <_printf_i+0x1ce>
 8004492:	6018      	str	r0, [r3, #0]
 8004494:	e002      	b.n	800449c <_printf_i+0x1d4>
 8004496:	0671      	lsls	r1, r6, #25
 8004498:	d5fb      	bpl.n	8004492 <_printf_i+0x1ca>
 800449a:	8018      	strh	r0, [r3, #0]
 800449c:	2300      	movs	r3, #0
 800449e:	4616      	mov	r6, r2
 80044a0:	6123      	str	r3, [r4, #16]
 80044a2:	e7ba      	b.n	800441a <_printf_i+0x152>
 80044a4:	680b      	ldr	r3, [r1, #0]
 80044a6:	1d1a      	adds	r2, r3, #4
 80044a8:	600a      	str	r2, [r1, #0]
 80044aa:	681e      	ldr	r6, [r3, #0]
 80044ac:	2100      	movs	r1, #0
 80044ae:	4630      	mov	r0, r6
 80044b0:	6862      	ldr	r2, [r4, #4]
 80044b2:	f000 f82f 	bl	8004514 <memchr>
 80044b6:	b108      	cbz	r0, 80044bc <_printf_i+0x1f4>
 80044b8:	1b80      	subs	r0, r0, r6
 80044ba:	6060      	str	r0, [r4, #4]
 80044bc:	6863      	ldr	r3, [r4, #4]
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	2300      	movs	r3, #0
 80044c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c6:	e7a8      	b.n	800441a <_printf_i+0x152>
 80044c8:	4632      	mov	r2, r6
 80044ca:	4649      	mov	r1, r9
 80044cc:	4640      	mov	r0, r8
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	47d0      	blx	sl
 80044d2:	3001      	adds	r0, #1
 80044d4:	d0ab      	beq.n	800442e <_printf_i+0x166>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	079b      	lsls	r3, r3, #30
 80044da:	d413      	bmi.n	8004504 <_printf_i+0x23c>
 80044dc:	68e0      	ldr	r0, [r4, #12]
 80044de:	9b03      	ldr	r3, [sp, #12]
 80044e0:	4298      	cmp	r0, r3
 80044e2:	bfb8      	it	lt
 80044e4:	4618      	movlt	r0, r3
 80044e6:	e7a4      	b.n	8004432 <_printf_i+0x16a>
 80044e8:	2301      	movs	r3, #1
 80044ea:	4632      	mov	r2, r6
 80044ec:	4649      	mov	r1, r9
 80044ee:	4640      	mov	r0, r8
 80044f0:	47d0      	blx	sl
 80044f2:	3001      	adds	r0, #1
 80044f4:	d09b      	beq.n	800442e <_printf_i+0x166>
 80044f6:	3501      	adds	r5, #1
 80044f8:	68e3      	ldr	r3, [r4, #12]
 80044fa:	9903      	ldr	r1, [sp, #12]
 80044fc:	1a5b      	subs	r3, r3, r1
 80044fe:	42ab      	cmp	r3, r5
 8004500:	dcf2      	bgt.n	80044e8 <_printf_i+0x220>
 8004502:	e7eb      	b.n	80044dc <_printf_i+0x214>
 8004504:	2500      	movs	r5, #0
 8004506:	f104 0619 	add.w	r6, r4, #25
 800450a:	e7f5      	b.n	80044f8 <_printf_i+0x230>
 800450c:	08004b02 	.word	0x08004b02
 8004510:	08004b13 	.word	0x08004b13

08004514 <memchr>:
 8004514:	4603      	mov	r3, r0
 8004516:	b510      	push	{r4, lr}
 8004518:	b2c9      	uxtb	r1, r1
 800451a:	4402      	add	r2, r0
 800451c:	4293      	cmp	r3, r2
 800451e:	4618      	mov	r0, r3
 8004520:	d101      	bne.n	8004526 <memchr+0x12>
 8004522:	2000      	movs	r0, #0
 8004524:	e003      	b.n	800452e <memchr+0x1a>
 8004526:	7804      	ldrb	r4, [r0, #0]
 8004528:	3301      	adds	r3, #1
 800452a:	428c      	cmp	r4, r1
 800452c:	d1f6      	bne.n	800451c <memchr+0x8>
 800452e:	bd10      	pop	{r4, pc}

08004530 <memcpy>:
 8004530:	440a      	add	r2, r1
 8004532:	4291      	cmp	r1, r2
 8004534:	f100 33ff 	add.w	r3, r0, #4294967295
 8004538:	d100      	bne.n	800453c <memcpy+0xc>
 800453a:	4770      	bx	lr
 800453c:	b510      	push	{r4, lr}
 800453e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004542:	4291      	cmp	r1, r2
 8004544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004548:	d1f9      	bne.n	800453e <memcpy+0xe>
 800454a:	bd10      	pop	{r4, pc}

0800454c <memmove>:
 800454c:	4288      	cmp	r0, r1
 800454e:	b510      	push	{r4, lr}
 8004550:	eb01 0402 	add.w	r4, r1, r2
 8004554:	d902      	bls.n	800455c <memmove+0x10>
 8004556:	4284      	cmp	r4, r0
 8004558:	4623      	mov	r3, r4
 800455a:	d807      	bhi.n	800456c <memmove+0x20>
 800455c:	1e43      	subs	r3, r0, #1
 800455e:	42a1      	cmp	r1, r4
 8004560:	d008      	beq.n	8004574 <memmove+0x28>
 8004562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800456a:	e7f8      	b.n	800455e <memmove+0x12>
 800456c:	4601      	mov	r1, r0
 800456e:	4402      	add	r2, r0
 8004570:	428a      	cmp	r2, r1
 8004572:	d100      	bne.n	8004576 <memmove+0x2a>
 8004574:	bd10      	pop	{r4, pc}
 8004576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800457a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800457e:	e7f7      	b.n	8004570 <memmove+0x24>

08004580 <_free_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4605      	mov	r5, r0
 8004584:	2900      	cmp	r1, #0
 8004586:	d043      	beq.n	8004610 <_free_r+0x90>
 8004588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800458c:	1f0c      	subs	r4, r1, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	bfb8      	it	lt
 8004592:	18e4      	addlt	r4, r4, r3
 8004594:	f000 f8d0 	bl	8004738 <__malloc_lock>
 8004598:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <_free_r+0x94>)
 800459a:	6813      	ldr	r3, [r2, #0]
 800459c:	4610      	mov	r0, r2
 800459e:	b933      	cbnz	r3, 80045ae <_free_r+0x2e>
 80045a0:	6063      	str	r3, [r4, #4]
 80045a2:	6014      	str	r4, [r2, #0]
 80045a4:	4628      	mov	r0, r5
 80045a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045aa:	f000 b8cb 	b.w	8004744 <__malloc_unlock>
 80045ae:	42a3      	cmp	r3, r4
 80045b0:	d90a      	bls.n	80045c8 <_free_r+0x48>
 80045b2:	6821      	ldr	r1, [r4, #0]
 80045b4:	1862      	adds	r2, r4, r1
 80045b6:	4293      	cmp	r3, r2
 80045b8:	bf01      	itttt	eq
 80045ba:	681a      	ldreq	r2, [r3, #0]
 80045bc:	685b      	ldreq	r3, [r3, #4]
 80045be:	1852      	addeq	r2, r2, r1
 80045c0:	6022      	streq	r2, [r4, #0]
 80045c2:	6063      	str	r3, [r4, #4]
 80045c4:	6004      	str	r4, [r0, #0]
 80045c6:	e7ed      	b.n	80045a4 <_free_r+0x24>
 80045c8:	461a      	mov	r2, r3
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	b10b      	cbz	r3, 80045d2 <_free_r+0x52>
 80045ce:	42a3      	cmp	r3, r4
 80045d0:	d9fa      	bls.n	80045c8 <_free_r+0x48>
 80045d2:	6811      	ldr	r1, [r2, #0]
 80045d4:	1850      	adds	r0, r2, r1
 80045d6:	42a0      	cmp	r0, r4
 80045d8:	d10b      	bne.n	80045f2 <_free_r+0x72>
 80045da:	6820      	ldr	r0, [r4, #0]
 80045dc:	4401      	add	r1, r0
 80045de:	1850      	adds	r0, r2, r1
 80045e0:	4283      	cmp	r3, r0
 80045e2:	6011      	str	r1, [r2, #0]
 80045e4:	d1de      	bne.n	80045a4 <_free_r+0x24>
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4401      	add	r1, r0
 80045ec:	6011      	str	r1, [r2, #0]
 80045ee:	6053      	str	r3, [r2, #4]
 80045f0:	e7d8      	b.n	80045a4 <_free_r+0x24>
 80045f2:	d902      	bls.n	80045fa <_free_r+0x7a>
 80045f4:	230c      	movs	r3, #12
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	e7d4      	b.n	80045a4 <_free_r+0x24>
 80045fa:	6820      	ldr	r0, [r4, #0]
 80045fc:	1821      	adds	r1, r4, r0
 80045fe:	428b      	cmp	r3, r1
 8004600:	bf01      	itttt	eq
 8004602:	6819      	ldreq	r1, [r3, #0]
 8004604:	685b      	ldreq	r3, [r3, #4]
 8004606:	1809      	addeq	r1, r1, r0
 8004608:	6021      	streq	r1, [r4, #0]
 800460a:	6063      	str	r3, [r4, #4]
 800460c:	6054      	str	r4, [r2, #4]
 800460e:	e7c9      	b.n	80045a4 <_free_r+0x24>
 8004610:	bd38      	pop	{r3, r4, r5, pc}
 8004612:	bf00      	nop
 8004614:	20000094 	.word	0x20000094

08004618 <_malloc_r>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	1ccd      	adds	r5, r1, #3
 800461c:	f025 0503 	bic.w	r5, r5, #3
 8004620:	3508      	adds	r5, #8
 8004622:	2d0c      	cmp	r5, #12
 8004624:	bf38      	it	cc
 8004626:	250c      	movcc	r5, #12
 8004628:	2d00      	cmp	r5, #0
 800462a:	4606      	mov	r6, r0
 800462c:	db01      	blt.n	8004632 <_malloc_r+0x1a>
 800462e:	42a9      	cmp	r1, r5
 8004630:	d903      	bls.n	800463a <_malloc_r+0x22>
 8004632:	230c      	movs	r3, #12
 8004634:	6033      	str	r3, [r6, #0]
 8004636:	2000      	movs	r0, #0
 8004638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800463a:	f000 f87d 	bl	8004738 <__malloc_lock>
 800463e:	4921      	ldr	r1, [pc, #132]	; (80046c4 <_malloc_r+0xac>)
 8004640:	680a      	ldr	r2, [r1, #0]
 8004642:	4614      	mov	r4, r2
 8004644:	b99c      	cbnz	r4, 800466e <_malloc_r+0x56>
 8004646:	4f20      	ldr	r7, [pc, #128]	; (80046c8 <_malloc_r+0xb0>)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	b923      	cbnz	r3, 8004656 <_malloc_r+0x3e>
 800464c:	4621      	mov	r1, r4
 800464e:	4630      	mov	r0, r6
 8004650:	f000 f862 	bl	8004718 <_sbrk_r>
 8004654:	6038      	str	r0, [r7, #0]
 8004656:	4629      	mov	r1, r5
 8004658:	4630      	mov	r0, r6
 800465a:	f000 f85d 	bl	8004718 <_sbrk_r>
 800465e:	1c43      	adds	r3, r0, #1
 8004660:	d123      	bne.n	80046aa <_malloc_r+0x92>
 8004662:	230c      	movs	r3, #12
 8004664:	4630      	mov	r0, r6
 8004666:	6033      	str	r3, [r6, #0]
 8004668:	f000 f86c 	bl	8004744 <__malloc_unlock>
 800466c:	e7e3      	b.n	8004636 <_malloc_r+0x1e>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	1b5b      	subs	r3, r3, r5
 8004672:	d417      	bmi.n	80046a4 <_malloc_r+0x8c>
 8004674:	2b0b      	cmp	r3, #11
 8004676:	d903      	bls.n	8004680 <_malloc_r+0x68>
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	441c      	add	r4, r3
 800467c:	6025      	str	r5, [r4, #0]
 800467e:	e004      	b.n	800468a <_malloc_r+0x72>
 8004680:	6863      	ldr	r3, [r4, #4]
 8004682:	42a2      	cmp	r2, r4
 8004684:	bf0c      	ite	eq
 8004686:	600b      	streq	r3, [r1, #0]
 8004688:	6053      	strne	r3, [r2, #4]
 800468a:	4630      	mov	r0, r6
 800468c:	f000 f85a 	bl	8004744 <__malloc_unlock>
 8004690:	f104 000b 	add.w	r0, r4, #11
 8004694:	1d23      	adds	r3, r4, #4
 8004696:	f020 0007 	bic.w	r0, r0, #7
 800469a:	1ac2      	subs	r2, r0, r3
 800469c:	d0cc      	beq.n	8004638 <_malloc_r+0x20>
 800469e:	1a1b      	subs	r3, r3, r0
 80046a0:	50a3      	str	r3, [r4, r2]
 80046a2:	e7c9      	b.n	8004638 <_malloc_r+0x20>
 80046a4:	4622      	mov	r2, r4
 80046a6:	6864      	ldr	r4, [r4, #4]
 80046a8:	e7cc      	b.n	8004644 <_malloc_r+0x2c>
 80046aa:	1cc4      	adds	r4, r0, #3
 80046ac:	f024 0403 	bic.w	r4, r4, #3
 80046b0:	42a0      	cmp	r0, r4
 80046b2:	d0e3      	beq.n	800467c <_malloc_r+0x64>
 80046b4:	1a21      	subs	r1, r4, r0
 80046b6:	4630      	mov	r0, r6
 80046b8:	f000 f82e 	bl	8004718 <_sbrk_r>
 80046bc:	3001      	adds	r0, #1
 80046be:	d1dd      	bne.n	800467c <_malloc_r+0x64>
 80046c0:	e7cf      	b.n	8004662 <_malloc_r+0x4a>
 80046c2:	bf00      	nop
 80046c4:	20000094 	.word	0x20000094
 80046c8:	20000098 	.word	0x20000098

080046cc <_realloc_r>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	4607      	mov	r7, r0
 80046d0:	4614      	mov	r4, r2
 80046d2:	460e      	mov	r6, r1
 80046d4:	b921      	cbnz	r1, 80046e0 <_realloc_r+0x14>
 80046d6:	4611      	mov	r1, r2
 80046d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046dc:	f7ff bf9c 	b.w	8004618 <_malloc_r>
 80046e0:	b922      	cbnz	r2, 80046ec <_realloc_r+0x20>
 80046e2:	f7ff ff4d 	bl	8004580 <_free_r>
 80046e6:	4625      	mov	r5, r4
 80046e8:	4628      	mov	r0, r5
 80046ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ec:	f000 f830 	bl	8004750 <_malloc_usable_size_r>
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d20f      	bcs.n	8004714 <_realloc_r+0x48>
 80046f4:	4621      	mov	r1, r4
 80046f6:	4638      	mov	r0, r7
 80046f8:	f7ff ff8e 	bl	8004618 <_malloc_r>
 80046fc:	4605      	mov	r5, r0
 80046fe:	2800      	cmp	r0, #0
 8004700:	d0f2      	beq.n	80046e8 <_realloc_r+0x1c>
 8004702:	4631      	mov	r1, r6
 8004704:	4622      	mov	r2, r4
 8004706:	f7ff ff13 	bl	8004530 <memcpy>
 800470a:	4631      	mov	r1, r6
 800470c:	4638      	mov	r0, r7
 800470e:	f7ff ff37 	bl	8004580 <_free_r>
 8004712:	e7e9      	b.n	80046e8 <_realloc_r+0x1c>
 8004714:	4635      	mov	r5, r6
 8004716:	e7e7      	b.n	80046e8 <_realloc_r+0x1c>

08004718 <_sbrk_r>:
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	2300      	movs	r3, #0
 800471c:	4d05      	ldr	r5, [pc, #20]	; (8004734 <_sbrk_r+0x1c>)
 800471e:	4604      	mov	r4, r0
 8004720:	4608      	mov	r0, r1
 8004722:	602b      	str	r3, [r5, #0]
 8004724:	f7fd f8ba 	bl	800189c <_sbrk>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	d102      	bne.n	8004732 <_sbrk_r+0x1a>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	b103      	cbz	r3, 8004732 <_sbrk_r+0x1a>
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	bd38      	pop	{r3, r4, r5, pc}
 8004734:	20000184 	.word	0x20000184

08004738 <__malloc_lock>:
 8004738:	4801      	ldr	r0, [pc, #4]	; (8004740 <__malloc_lock+0x8>)
 800473a:	f000 b811 	b.w	8004760 <__retarget_lock_acquire_recursive>
 800473e:	bf00      	nop
 8004740:	2000018c 	.word	0x2000018c

08004744 <__malloc_unlock>:
 8004744:	4801      	ldr	r0, [pc, #4]	; (800474c <__malloc_unlock+0x8>)
 8004746:	f000 b80c 	b.w	8004762 <__retarget_lock_release_recursive>
 800474a:	bf00      	nop
 800474c:	2000018c 	.word	0x2000018c

08004750 <_malloc_usable_size_r>:
 8004750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004754:	1f18      	subs	r0, r3, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	bfbc      	itt	lt
 800475a:	580b      	ldrlt	r3, [r1, r0]
 800475c:	18c0      	addlt	r0, r0, r3
 800475e:	4770      	bx	lr

08004760 <__retarget_lock_acquire_recursive>:
 8004760:	4770      	bx	lr

08004762 <__retarget_lock_release_recursive>:
 8004762:	4770      	bx	lr
 8004764:	0000      	movs	r0, r0
	...

08004768 <ceil>:
 8004768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800476c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004770:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004774:	2e13      	cmp	r6, #19
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4607      	mov	r7, r0
 800477c:	460c      	mov	r4, r1
 800477e:	4605      	mov	r5, r0
 8004780:	dc31      	bgt.n	80047e6 <ceil+0x7e>
 8004782:	2e00      	cmp	r6, #0
 8004784:	da12      	bge.n	80047ac <ceil+0x44>
 8004786:	a334      	add	r3, pc, #208	; (adr r3, 8004858 <ceil+0xf0>)
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f7fb fcee 	bl	800016c <__adddf3>
 8004790:	2200      	movs	r2, #0
 8004792:	2300      	movs	r3, #0
 8004794:	f7fc f930 	bl	80009f8 <__aeabi_dcmpgt>
 8004798:	b128      	cbz	r0, 80047a6 <ceil+0x3e>
 800479a:	2c00      	cmp	r4, #0
 800479c:	db56      	blt.n	800484c <ceil+0xe4>
 800479e:	433c      	orrs	r4, r7
 80047a0:	d058      	beq.n	8004854 <ceil+0xec>
 80047a2:	2500      	movs	r5, #0
 80047a4:	4c2e      	ldr	r4, [pc, #184]	; (8004860 <ceil+0xf8>)
 80047a6:	4623      	mov	r3, r4
 80047a8:	462f      	mov	r7, r5
 80047aa:	e025      	b.n	80047f8 <ceil+0x90>
 80047ac:	4a2d      	ldr	r2, [pc, #180]	; (8004864 <ceil+0xfc>)
 80047ae:	fa42 f806 	asr.w	r8, r2, r6
 80047b2:	ea01 0208 	and.w	r2, r1, r8
 80047b6:	4302      	orrs	r2, r0
 80047b8:	d01e      	beq.n	80047f8 <ceil+0x90>
 80047ba:	a327      	add	r3, pc, #156	; (adr r3, 8004858 <ceil+0xf0>)
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f7fb fcd4 	bl	800016c <__adddf3>
 80047c4:	2200      	movs	r2, #0
 80047c6:	2300      	movs	r3, #0
 80047c8:	f7fc f916 	bl	80009f8 <__aeabi_dcmpgt>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d0ea      	beq.n	80047a6 <ceil+0x3e>
 80047d0:	2c00      	cmp	r4, #0
 80047d2:	bfc2      	ittt	gt
 80047d4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80047d8:	fa43 f606 	asrgt.w	r6, r3, r6
 80047dc:	19a4      	addgt	r4, r4, r6
 80047de:	2500      	movs	r5, #0
 80047e0:	ea24 0408 	bic.w	r4, r4, r8
 80047e4:	e7df      	b.n	80047a6 <ceil+0x3e>
 80047e6:	2e33      	cmp	r6, #51	; 0x33
 80047e8:	dd0a      	ble.n	8004800 <ceil+0x98>
 80047ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80047ee:	d103      	bne.n	80047f8 <ceil+0x90>
 80047f0:	f7fb fcbc 	bl	800016c <__adddf3>
 80047f4:	4607      	mov	r7, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4638      	mov	r0, r7
 80047fa:	4619      	mov	r1, r3
 80047fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004800:	f04f 32ff 	mov.w	r2, #4294967295
 8004804:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004808:	fa22 f808 	lsr.w	r8, r2, r8
 800480c:	ea18 0f00 	tst.w	r8, r0
 8004810:	d0f2      	beq.n	80047f8 <ceil+0x90>
 8004812:	a311      	add	r3, pc, #68	; (adr r3, 8004858 <ceil+0xf0>)
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f7fb fca8 	bl	800016c <__adddf3>
 800481c:	2200      	movs	r2, #0
 800481e:	2300      	movs	r3, #0
 8004820:	f7fc f8ea 	bl	80009f8 <__aeabi_dcmpgt>
 8004824:	2800      	cmp	r0, #0
 8004826:	d0be      	beq.n	80047a6 <ceil+0x3e>
 8004828:	2c00      	cmp	r4, #0
 800482a:	dd02      	ble.n	8004832 <ceil+0xca>
 800482c:	2e14      	cmp	r6, #20
 800482e:	d103      	bne.n	8004838 <ceil+0xd0>
 8004830:	3401      	adds	r4, #1
 8004832:	ea25 0508 	bic.w	r5, r5, r8
 8004836:	e7b6      	b.n	80047a6 <ceil+0x3e>
 8004838:	2301      	movs	r3, #1
 800483a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800483e:	fa03 f606 	lsl.w	r6, r3, r6
 8004842:	4435      	add	r5, r6
 8004844:	42bd      	cmp	r5, r7
 8004846:	bf38      	it	cc
 8004848:	18e4      	addcc	r4, r4, r3
 800484a:	e7f2      	b.n	8004832 <ceil+0xca>
 800484c:	2500      	movs	r5, #0
 800484e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004852:	e7a8      	b.n	80047a6 <ceil+0x3e>
 8004854:	4625      	mov	r5, r4
 8004856:	e7a6      	b.n	80047a6 <ceil+0x3e>
 8004858:	8800759c 	.word	0x8800759c
 800485c:	7e37e43c 	.word	0x7e37e43c
 8004860:	3ff00000 	.word	0x3ff00000
 8004864:	000fffff 	.word	0x000fffff

08004868 <_init>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	bf00      	nop
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr

08004874 <_fini>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	bf00      	nop
 8004878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487a:	bc08      	pop	{r3}
 800487c:	469e      	mov	lr, r3
 800487e:	4770      	bx	lr
